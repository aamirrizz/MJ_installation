# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""List of all actions that are possible across all AI Models"""
type AIAction_ {
  AIModelActionsArray: [AIModelAction_!]!
  DefaultModel: String
  DefaultModelID: String
  DefaultPrompt: String
  Description: String
  EntityAIActionsArray: [EntityAIAction_!]!
  ID: String!
  IsActive: Boolean!
  Name: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Tracks the actions supported by each AI Model"""
type AIModelAction_ {
  AIAction: String!
  AIActionID: String!
  AIModel: String!
  AIModelID: String!
  ID: String!
  IsActive: Boolean!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Types of AI Models"""
type AIModelType_ {
  AIModelsArray: [AIModel_!]!
  Description: String
  ID: String!
  Name: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Catalog of all AI Models configured in the system"""
type AIModel_ {
  AIActionsArray: [AIAction_!]!
  AIModelActionsArray: [AIModelAction_!]!
  AIModelType: String!
  AIModelTypeID: String!

  """
  The name of the model to use with API calls which might differ from the Name, if APIName is not provided, Name will be used for API calls
  """
  APIName: String
  Description: String
  DriverClass: String
  DriverImportPath: String
  EntityAIActionsArray: [EntityAIAction_!]!
  EntityDocumentsArray: [EntityDocument_!]!
  ID: String!
  IsActive: Boolean!
  Name: String!

  """
  A simplified power rank of each model for a given AI Model Type. For example, if we have GPT 3, GPT 3.5, and GPT 4, we would have a PowerRank of 1 for GPT3, 2 for GPT 3.5, and 3 for GPT 4. This can be used within model families like OpenAI or across all models. For example if you had Llama 2 in the mix which is similar to GPT 3.5 it would also have a PowerRank of 2. This can be used at runtime to pick the most/least powerful or compare model relative power.
  """
  PowerRank: Int
  VectorIndexesArray: [VectorIndex_!]!
  Vendor: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Links actions to authorizations, one or more of these must be possessed by a user in order to execute the action.
"""
type ActionAuthorization_ {
  Action: String!
  ActionID: String!
  Authorization: String!
  AuthorizationID: String!
  Comments: String
  ID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Organizes actions into categories, including name, description, and optional parent category for hierarchy.
"""
type ActionCategory_ {
  ActionCategoriesArray: [ActionCategory_!]!
  ActionsArray: [Action_!]!

  """Description of the action category."""
  Description: String
  ID: String!

  """Name of the action category."""
  Name: String!
  Parent: String
  ParentID: String

  """Status of the action category (Pending, Active, Disabled)."""
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Lists possible contexts for action execution with optional descriptions.
"""
type ActionContextType_ {
  ActionContextsArray: [ActionContext_!]!

  """Description of the context type."""
  Description: String
  ID: String!

  """Name of the context type."""
  Name: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Links actions to their supported context types enabling a given action to be executable in more than one context.
"""
type ActionContext_ {
  Action: String!
  ActionID: String!
  ContextType: String
  ContextTypeID: String
  ID: String!

  """Status of the action context (Pending, Active, Disabled)."""
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Tracks every execution of an action, including start and end times, inputs, outputs, and result codes.
"""
type ActionExecutionLog_ {
  Action: String!
  ActionID: String!

  """Timestamp of when the action ended execution."""
  EndedAt: Timestamp
  ID: String!
  Params: String
  ResultCode: String

  """Number of days to retain the log; NULL for indefinite retention."""
  RetentionPeriod: Int

  """Timestamp of when the action started execution."""
  StartedAt: Timestamp!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Defines filters that can be evaluated ahead of executing an action. Action Filters are usable in any code pipeline you can execute them with the same context as the action itself and use the outcome to determine if the action should execute or not.
"""
type ActionFilter_ {
  Code: String!
  CodeExplanation: String
  EntityActionFiltersArray: [EntityActionFilter_!]!
  ID: String!
  UserComments: String
  UserDescription: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Tracks the list of libraries that a given Action uses, including a list of classes/functions for each library.
"""
type ActionLibrary_ {
  Action: String!
  ActionID: String!
  ID: String!

  """List of classes and functions used by the action from the library."""
  ItemsUsed: String
  Library: String!
  LibraryID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Tracks the input and output parameters for Actions."""
type ActionParam_ {
  Action: String!
  ActionID: String!
  DefaultValue: String
  Description: String
  EntityActionParamsArray: [EntityActionParam_!]!
  ID: String!
  IsArray: Boolean!
  IsRequired: Boolean!
  Name: String!
  ScheduledActionParamsArray: [ScheduledActionParam_!]!
  Type: String!

  """
  Tracks the basic value type of the parameter, additional information can be provided in the Description field
  """
  ValueType: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Defines the possible result codes for each action."""
type ActionResultCode_ {
  Action: String!
  ActionID: String!

  """Description of the result code."""
  Description: String
  ID: String!

  """
  Indicates if the result code is a success or not. It is possible an action might have more than one failure condition/result code and same for success conditions.
  """
  IsSuccess: Boolean!
  ResultCode: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Stores action definitions, including prompts, generated code, user comments, and status.
"""
type Action_ {
  ActionAuthorizationsArray: [ActionAuthorization_!]!
  ActionContextsArray: [ActionContext_!]!
  ActionExecutionLogsArray: [ActionExecutionLog_!]!
  ActionLibrariesArray: [ActionLibrary_!]!
  ActionParamsArray: [ActionParam_!]!
  ActionResultCodesArray: [ActionResultCode_!]!
  Category: String
  CategoryID: String
  Code: String

  """
  Optional comments when an individual (or an AI) reviews and approves the code.
  """
  CodeApprovalComments: String

  """An action won't be usable until the code is approved."""
  CodeApprovalStatus: String!

  """When the code was approved."""
  CodeApprovedAt: Timestamp
  CodeApprovedByUser: String
  CodeApprovedByUserID: String

  """AI's explanation of the code."""
  CodeComments: String

  """
  If set to 1, Code will never be generated by the AI system. This overrides all other settings including the ForceCodeGeneration bit
  """
  CodeLocked: Boolean!
  Description: String
  EntityActionsArray: [EntityAction_!]!

  """
  If set to 1, the Action will generate code for the provided UserPrompt on the next Save even if the UserPrompt hasn't changed. This is useful to force regeneration when other candidates (such as a change in Action Inputs/Outputs) occurs or on demand by a user.
  """
  ForceCodeGeneration: Boolean!
  ID: String!
  Name: String!

  """Number of days to retain execution logs; NULL for indefinite."""
  RetentionPeriod: Int
  ScheduledActionsArray: [ScheduledAction_!]!

  """Status of the action (Pending, Active, Disabled)."""
  Status: String!

  """
  Generated or Custom. Generated means the UserPrompt is used to prompt an AI model to automatically create the code for the Action. Custom means that a custom class has been implemented that subclasses the BaseAction class. The custom class needs to use the @RegisterClass decorator and be included in the MJAPI (or other runtime environment) to be available for execution.
  """
  Type: String!

  """User's comments not shared with the LLM."""
  UserComments: String
  UserPrompt: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
List of entities within each application. An application can have any number of entities and an entity can be part of any number of applications.
"""
type ApplicationEntity_ {
  Application: String!
  ApplicationID: String!

  """
  When set to 1, the entity will be included by default for a new user when they first access the application in question
  """
  DefaultForNewUser: Boolean!
  Entity: String!
  EntityBaseTable: String!
  EntityBaseTableCodeName: String
  EntityClassName: String
  EntityCodeName: String
  EntityID: String!
  ID: String!
  Sequence: Int!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type ApplicationSetting_ {
  Application: String!
  ApplicationID: String!
  Comments: String
  ID: String!
  Name: String!
  Value: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Applications are used to group entities in the user interface for ease of user access
"""
type Application_ {
  ApplicationEntitiesArray: [ApplicationEntity_!]!
  ApplicationSettingsArray: [ApplicationSetting_!]!

  """
  If turned on, when a new user first uses the MJ Explorer app, the application records with this turned on will have this application included in their selected application list.
  """
  DefaultForNewUser: Boolean!
  Description: String
  ID: String!

  """
  Specify the CSS class information for the display icon for each application.
  """
  Icon: String
  Name: String!
  UserApplicationsArray: [UserApplication_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type AskSkipResultType {
  AIMessageConversationDetailId: Int!
  ConversationId: Int!
  ResponsePhase: SkipResponsePhase!
  Result: String!
  Status: String!
  Success: Boolean!
  UserMessageConversationDetailId: Int!
}

type AuditLogType_ {
  AuditLogTypesArray: [AuditLogType_!]!
  AuditLogsArray: [AuditLog_!]!
  Authorization: String
  AuthorizationID: String
  Description: String
  ID: String!
  Name: String!
  Parent: String
  ParentID: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type AuditLog_ {
  AuditLogType: String!
  AuditLogTypeID: String!
  Authorization: String
  AuthorizationID: String
  Description: String
  Details: String
  Entity: String
  EntityID: String
  ID: String!
  RecordID: String
  Status: String!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type AuthorizationRole_ {
  Authorization: String!
  AuthorizationID: String!
  ID: String!
  Role: String!
  RoleID: String!
  Type: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type Authorization_ {
  ActionAuthorizationsArray: [ActionAuthorization_!]!
  AuditLogTypesArray: [AuditLogType_!]!
  AuditLogsArray: [AuditLog_!]!
  AuthorizationRolesArray: [AuthorizationRole_!]!
  AuthorizationsArray: [Authorization_!]!
  Description: String
  ID: String!
  IsActive: Boolean!
  Name: String!
  Parent: String
  ParentID: String

  """
  When set to 1, Audit Log records are created whenever this authorization is invoked for a user
  """
  UseAuditLog: Boolean!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type Color {
  ID: Int!
  createdZ: String!
  name: String!
}

type ColorNotification {
  date: Timestamp!
  message: String
}

"""Base message types and their supported functionalities."""
type CommunicationBaseMessageType_ {
  CommunicationProviderMessageTypesArray: [CommunicationProviderMessageType_!]!
  EntityCommunicationMessageTypesArray: [EntityCommunicationMessageType_!]!
  ID: String!

  """The maximum size in bytes for the message."""
  MaxBytes: Int

  """Indicates if attachments are supported."""
  SupportsAttachments: Boolean!

  """Indicates if HTML content is supported."""
  SupportsHtml: Boolean!

  """Indicates if a subject line is supported."""
  SupportsSubjectLine: Boolean!
  Type: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Logs of sent and received messages."""
type CommunicationLog_ {
  CommunicationProvider: String!
  CommunicationProviderID: String!
  CommunicationProviderMessageType: String!
  CommunicationProviderMessageTypeID: String!
  CommunicationRunID: String

  """The direction of the communication log (Sending or Receiving)."""
  Direction: String!

  """The error message if the message sending failed."""
  ErrorMessage: String
  ID: String!

  """The content of the logged message."""
  MessageContent: String

  """The date and time when the message was logged."""
  MessageDate: Timestamp!

  """
  The status of the logged message (Pending, In-Progress, Complete, Failed).
  """
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input CommunicationMessageInput {
  Body: String
  BodyTemplate: TemplateInputType
  ContextData: JSONObject
  From: String!
  HTMLBody: String
  HTMLBodyTemplate: TemplateInputType
  MessageType: CommunicationProviderMessageType!
  Subject: String
  SubjectTemplate: TemplateInputType
  To: String!
}

input CommunicationProviderMessageType {
  AdditionalAttributes: String!
  CommunicationBaseMessageType: String!
  CommunicationBaseMessageTypeID: Float!
  CommunicationProvider: String!
  CommunicationProviderID: Float!
  ID: Float!
  Name: String!
  Status: String!
  _mj_CreatedAt: Timestamp!
  _mj_UpdatedAt: Timestamp!
}

"""
Providers and their supported message types with additional attributes.
"""
type CommunicationProviderMessageType_ {
  """Additional attributes specific to the provider message type."""
  AdditionalAttributes: String
  CommunicationBaseMessageType: String!
  CommunicationBaseMessageTypeID: String!
  CommunicationLogsArray: [CommunicationLog_!]!
  CommunicationProvider: String!
  CommunicationProviderID: String!
  ID: String!
  Name: String!

  """The status of the provider message type (Disabled or Active)."""
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""All supported communication providers."""
type CommunicationProvider_ {
  CommunicationLogsArray: [CommunicationLog_!]!
  CommunicationProviderMessageTypesArray: [CommunicationProviderMessageType_!]!
  Description: String
  ID: String!
  Name: String!

  """The status of the communication provider (Disabled or Active)."""
  Status: String!

  """Indicates if the provider supports receiving messages."""
  SupportsReceiving: Boolean!

  """Indicates if the provider supports sending messages."""
  SupportsSending: Boolean!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Runs of bulk message sends and receives."""
type CommunicationRun_ {
  Comments: String
  CommunicationLogsArray: [CommunicationLog_!]!

  """The direction of the communication run (Sending or Receiving)."""
  Direction: String!
  EndedAt: Timestamp

  """The error message if the communication run failed."""
  ErrorMessage: String
  ID: String!
  StartedAt: Timestamp

  """
  The status of the communication run (Pending, In-Progress, Complete, Failed).
  """
  Status: String!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type CompanyIntegrationRecordMap_ {
  CompanyIntegrationID: String!
  Entity: String!
  EntityID: String!
  EntityRecordID: String!
  ExternalSystemRecordID: String!
  ID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type CompanyIntegrationRunAPILog_ {
  CompanyIntegrationRunID: String!
  ExecutedAt: Timestamp!
  ID: String!
  IsSuccess: Boolean!
  Parameters: String
  RequestMethod: String
  URL: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type CompanyIntegrationRunDetail_ {
  Action: String!
  CompanyIntegrationRunID: String!
  Entity: String!
  EntityID: String!
  ErrorLogsArray: [ErrorLog_!]!
  ExecutedAt: Timestamp!
  ID: String!
  IsSuccess: Boolean!
  RecordID: String!
  RunEndedAt: Timestamp
  RunStartedAt: Timestamp
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type CompanyIntegrationRun_ {
  Comments: String
  CompanyIntegrationID: String!
  CompanyIntegrationRunAPILogsArray: [CompanyIntegrationRunAPILog_!]!
  CompanyIntegrationRunDetailsArray: [CompanyIntegrationRunDetail_!]!
  EndedAt: Timestamp
  ErrorLogsArray: [ErrorLog_!]!
  ID: String!
  RunByUser: String!
  RunByUserID: String!
  StartedAt: Timestamp
  TotalRecords: Int!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Links individual company records to specific integrations"""
type CompanyIntegration_ {
  APIKey: String
  AccessToken: String
  ClientID: String
  ClientSecret: String
  Company: String!
  CompanyID: String!
  CompanyIntegrationRecordMapsArray: [CompanyIntegrationRecordMap_!]!
  CompanyIntegrationRunsArray: [CompanyIntegrationRun_!]!
  CustomAttribute1: String
  DriverClassName: String
  DriverImportPath: String
  EmployeeCompanyIntegrationsArray: [EmployeeCompanyIntegration_!]!
  ExternalSystemID: String
  ID: String!
  Integration: String!
  IntegrationID: String!
  IsActive: Boolean
  IsExternalSystemReadOnly: Boolean!
  LastRunEndedAt: Timestamp
  LastRunID: String
  LastRunStartedAt: Timestamp
  ListsArray: [List_!]!
  RefreshToken: String
  TokenExpirationDate: Timestamp
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
A list of organizational units within your business. These can be subsidiaries or divisions or other units. Companies are used to organizae employee records and also for separating integrations if you have multiple integrations of the same type of system.
"""
type Company_ {
  CompanyIntegrationsArray: [CompanyIntegration_!]!
  Description: String!
  Domain: String
  EmployeesArray: [Employee_!]!
  ID: String!
  LogoURL: String
  Name: String!
  Website: String
  WorkflowsArray: [Workflow_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input CompositeKeyInputType {
  KeyValuePairs: [KeyValuePairInputType!]!
}

type CompositeKeyOutputType {
  KeyValuePairs: [KeyValuePairOutputType!]!
}

type ConversationDetail_ {
  Conversation: String
  ConversationID: String!
  Error: String
  ExternalID: String
  HiddenToUser: Boolean!
  ID: String!
  Message: String!
  ReportsArray: [Report_!]!
  Role: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type Conversation_ {
  ConversationDetailsArray: [ConversationDetail_!]!
  DataContext: String
  DataContextID: String
  Description: String
  ExternalID: String
  ID: String!
  IsArchived: Boolean!
  LinkedEntity: String
  LinkedEntityID: String
  LinkedRecordID: String
  Name: String
  ReportsArray: [Report_!]!
  Type: String!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input CreateAIActionInput {
  DefaultModelID: String
  DefaultPrompt: String
  Description: String
  IsActive: Boolean!
  Name: String!
}

input CreateAIModelActionInput {
  AIActionID: String!
  AIModelID: String!
  IsActive: Boolean!
}

input CreateAIModelInput {
  AIModelTypeID: String!
  APIName: String
  Description: String
  DriverClass: String
  DriverImportPath: String
  IsActive: Boolean!
  Name: String!
  PowerRank: Int
  Vendor: String
}

input CreateAIModelTypeInput {
  Description: String
  Name: String!
}

input CreateActionAuthorizationInput {
  ActionID: String!
  AuthorizationID: String!
  Comments: String
}

input CreateActionCategoryInput {
  Description: String
  Name: String!
  ParentID: String
  Status: String!
}

input CreateActionContextInput {
  ActionID: String!
  ContextTypeID: String
  Status: String!
}

input CreateActionContextTypeInput {
  Description: String
  Name: String!
}

input CreateActionExecutionLogInput {
  ActionID: String!
  EndedAt: Timestamp
  Params: String
  ResultCode: String
  RetentionPeriod: Int
  StartedAt: Timestamp!
  UserID: String!
}

input CreateActionFilterInput {
  Code: String!
  CodeExplanation: String
  UserComments: String
  UserDescription: String!
}

input CreateActionInput {
  CategoryID: String
  Code: String
  CodeApprovalComments: String
  CodeApprovalStatus: String!
  CodeApprovedAt: Timestamp
  CodeApprovedByUserID: String
  CodeComments: String
  CodeLocked: Boolean!
  Description: String
  ForceCodeGeneration: Boolean!
  Name: String!
  RetentionPeriod: Int
  Status: String!
  Type: String!
  UserComments: String
  UserPrompt: String
}

input CreateActionLibraryInput {
  ActionID: String!
  ItemsUsed: String
  LibraryID: String!
}

input CreateActionParamInput {
  ActionID: String!
  DefaultValue: String
  Description: String
  IsArray: Boolean!
  IsRequired: Boolean!
  Name: String!
  Type: String!
  ValueType: String!
}

input CreateActionResultCodeInput {
  ActionID: String!
  Description: String
  IsSuccess: Boolean!
  ResultCode: String!
}

input CreateApplicationEntityInput {
  ApplicationID: String!
  DefaultForNewUser: Boolean!
  EntityID: String!
  Sequence: Int!
}

input CreateApplicationInput {
  DefaultForNewUser: Boolean!
  Description: String
  Icon: String
  Name: String!
}

input CreateApplicationSettingInput {
  ApplicationID: String!
  Comments: String
  Name: String!
  Value: String!
}

input CreateAuditLogInput {
  AuditLogTypeID: String!
  AuthorizationID: String
  Description: String
  Details: String
  EntityID: String
  RecordID: String
  Status: String!
  UserID: String!
}

input CreateCommunicationBaseMessageTypeInput {
  MaxBytes: Int
  SupportsAttachments: Boolean!
  SupportsHtml: Boolean!
  SupportsSubjectLine: Boolean!
  Type: String!
}

input CreateCommunicationLogInput {
  CommunicationProviderID: String!
  CommunicationProviderMessageTypeID: String!
  CommunicationRunID: String
  Direction: String!
  ErrorMessage: String
  MessageContent: String
  MessageDate: Timestamp!
  Status: String!
}

input CreateCommunicationProviderInput {
  Description: String
  Name: String!
  Status: String!
  SupportsReceiving: Boolean!
  SupportsSending: Boolean!
}

input CreateCommunicationProviderMessageTypeInput {
  AdditionalAttributes: String
  CommunicationBaseMessageTypeID: String!
  CommunicationProviderID: String!
  Name: String!
  Status: String!
}

input CreateCommunicationRunInput {
  Comments: String
  Direction: String!
  EndedAt: Timestamp
  ErrorMessage: String
  StartedAt: Timestamp
  Status: String!
  UserID: String!
}

input CreateCompanyInput {
  Description: String!
  Domain: String
  LogoURL: String
  Name: String!
  Website: String
}

input CreateCompanyIntegrationRecordMapInput {
  CompanyIntegrationID: String!
  EntityID: String!
  EntityRecordID: String!
  ExternalSystemRecordID: String!
}

input CreateConversationDetailInput {
  ConversationID: String!
  Error: String
  ExternalID: String
  HiddenToUser: Boolean!
  Message: String!
  Role: String!
}

input CreateConversationInput {
  DataContextID: String
  Description: String
  ExternalID: String
  IsArchived: Boolean!
  LinkedEntityID: String
  LinkedRecordID: String
  Name: String
  Type: String!
  UserID: String!
}

input CreateDashboardCategoryInput {
  Description: String
  Name: String!
  ParentID: String
  UserID: String!
}

input CreateDashboardInput {
  CategoryID: String
  Description: String
  Name: String!
  UIConfigDetails: String!
  UserID: String!
}

input CreateDataContextInput {
  Description: String
  LastRefreshedAt: Timestamp
  Name: String!
  UserID: String!
}

input CreateDataContextItemInput {
  DataContextID: String!
  DataJSON: String
  EntityID: String
  LastRefreshedAt: Timestamp
  QueryID: String
  RecordID: String
  SQL: String
  Type: String!
  ViewID: String
}

input CreateDuplicateRunDetailInput {
  DuplicateRunID: String!
  MatchErrorMessage: String
  MatchStatus: String!
  MergeErrorMessage: String
  MergeStatus: String!
  RecordID: String!
  SkippedReason: String
}

input CreateDuplicateRunDetailMatchInput {
  Action: String!
  ApprovalStatus: String!
  DuplicateRunDetailID: String!
  MatchProbability: Float!
  MatchRecordID: String!
  MatchSource: String!
  MatchedAt: Timestamp!
  MergeStatus: String!
  MergedAt: Timestamp!
  RecordMergeLogID: String
}

input CreateDuplicateRunInput {
  ApprovalComments: String
  ApprovalStatus: String!
  ApprovedByUserID: String
  EndedAt: Timestamp
  EntityID: String!
  ProcessingErrorMessage: String
  ProcessingStatus: String!
  SourceListID: String!
  StartedAt: Timestamp!
  StartedByUserID: String!
}

input CreateEmployeeInput {
  Active: Boolean!
  CompanyID: String!
  Email: String!
  FirstName: String!
  LastName: String!
  Phone: String
  SupervisorID: String
  Title: String
}

input CreateEntityAIActionInput {
  AIActionID: String!
  AIModelID: String!
  Comments: String
  EntityID: String!
  Name: String!
  OutputEntityID: String
  OutputField: String
  OutputType: String!
  Prompt: String
  SkipIfOutputFieldNotEmpty: Boolean!
  TriggerEvent: String!
  UserMessage: String!
}

input CreateEntityActionFilterInput {
  ActionFilterID: String!
  EntityActionID: String!
  Sequence: Int!
  Status: String!
}

input CreateEntityActionInput {
  ActionID: String!
  EntityID: String!
  Status: String!
}

input CreateEntityActionInvocationInput {
  EntityActionID: String!
  InvocationTypeID: String!
  Status: String!
}

input CreateEntityActionInvocationTypeInput {
  Description: String
  DisplaySequence: Int!
  Name: String!
}

input CreateEntityActionParamInput {
  ActionParamID: String!
  Comments: String
  EntityActionID: String!
  Value: String
  ValueType: String!
}

input CreateEntityCommunicationFieldInput {
  EntityCommunicationMessageTypeID: String!
  FieldName: String!
  Priority: Int!
}

input CreateEntityCommunicationMessageTypeInput {
  BaseMessageTypeID: String!
  EntityID: String!
  IsActive: Boolean!
}

input CreateEntityDocumentInput {
  AIModelID: String!
  AbsoluteMatchThreshold: Float!
  EntityID: String!
  Name: String!
  PotentialMatchThreshold: Float!
  Status: String!
  TemplateID: String!
  TypeID: String!
  VectorDatabaseID: String!
}

input CreateEntityDocumentRunInput {
  EndedAt: Timestamp
  EntityDocumentID: String!
  StartedAt: Timestamp
  Status: String!
}

input CreateEntityDocumentSettingInput {
  Comments: String
  EntityDocumentID: String!
  Name: String!
  Value: String!
}

input CreateEntityDocumentTypeInput {
  Description: String
  Name: String!
}

input CreateEntityFieldInput {
  AllowUpdateAPI: Boolean!
  AllowUpdateInView: Boolean!
  AutoUpdateDescription: Boolean!
  Category: String
  CodeType: String
  DefaultColumnWidth: Int
  DefaultInView: Boolean!
  Description: String
  DisplayName: String
  EntityIDFieldName: String
  ExtendedType: String
  FullTextSearchEnabled: Boolean!
  GeneratedFormSection: String!
  IncludeInGeneratedForm: Boolean!
  IncludeInUserSearchAPI: Boolean!
  IncludeRelatedEntityNameFieldInBaseView: Boolean!
  IsNameField: Boolean!
  IsPrimaryKey: Boolean!
  IsUnique: Boolean!
  RelatedEntityDisplayType: String!
  RelatedEntityFieldName: String
  RelatedEntityID: String
  RelatedEntityNameFieldMap: String
  UserSearchParamFormatAPI: String
  ValueListType: String!
  ViewCellTemplate: String
}

input CreateEntityInput {
  AllowAllRowsAPI: Boolean!
  AllowCreateAPI: Boolean!
  AllowDeleteAPI: Boolean!
  AllowRecordMerge: Boolean!
  AllowUpdateAPI: Boolean!
  AllowUserSearchAPI: Boolean!
  AuditRecordAccess: Boolean!
  AuditViewRuns: Boolean!
  AutoUpdateDescription: Boolean!
  BaseView: String!
  BaseViewGenerated: Boolean!
  CascadeDeletes: Boolean!
  CustomResolverAPI: Boolean!
  DeleteType: String!
  Description: String
  EntityObjectSubclassImport: String
  EntityObjectSubclassName: String
  FullTextCatalog: String
  FullTextCatalogGenerated: Boolean!
  FullTextIndex: String
  FullTextIndexGenerated: Boolean!
  FullTextSearchEnabled: Boolean!
  FullTextSearchFunction: String
  FullTextSearchFunctionGenerated: Boolean!
  Icon: String
  IncludeInAPI: Boolean!
  Name: String!
  NameSuffix: String
  ParentID: String
  PreferredCommunicationField: String
  RelationshipDefaultDisplayType: String!
  TrackRecordChanges: Boolean!
  UserFormGenerated: Boolean!
  UserViewMaxRows: Int
  VirtualEntity: Boolean!
  spCreate: String
  spCreateGenerated: Boolean!
  spDelete: String
  spDeleteGenerated: Boolean!
  spMatch: String
  spUpdate: String
  spUpdateGenerated: Boolean!
}

input CreateEntityPermissionInput {
  CanCreate: Boolean!
  CanDelete: Boolean!
  CanRead: Boolean!
  CanUpdate: Boolean!
  CreateRLSFilterID: String
  DeleteRLSFilterID: String
  EntityID: String!
  ReadRLSFilterID: String
  RoleID: String!
  UpdateRLSFilterID: String
}

input CreateEntityRecordDocumentInput {
  DocumentText: String
  EntityDocumentID: String!
  EntityID: String!
  EntityRecordUpdatedAt: Timestamp!
  RecordID: String!
  VectorID: String
  VectorIndexID: String!
  VectorJSON: String
}

input CreateEntityRelationshipDisplayComponentInput {
  Description: String
  Name: String!
  RelationshipType: String!
}

input CreateEntityRelationshipInput {
  BundleInAPI: Boolean!
  DisplayComponentConfiguration: String
  DisplayComponentID: String
  DisplayIcon: String
  DisplayIconType: String!
  DisplayInForm: Boolean!
  DisplayLocation: String!
  DisplayName: String
  EntityID: String!
  EntityKeyField: String
  IncludeInParentAllQuery: Boolean!
  JoinEntityInverseJoinField: String
  JoinEntityJoinField: String
  JoinView: String
  RelatedEntityID: String!
  RelatedEntityJoinField: String!
  Sequence: Int!
  Type: String!
}

input CreateEntitySettingInput {
  Comments: String
  EntityID: String!
  Name: String!
  Value: String!
}

input CreateExplorerNavigationItemInput {
  Comments: String
  Description: String
  IconCSSClass: String
  IsActive: Boolean!
  Name: String!
  Route: String!
  Sequence: Int!
  ShowInHomeScreen: Boolean!
  ShowInNavigationDrawer: Boolean!
}

input CreateFileCategoryInput {
  Description: String
  Name: String!
  ParentID: String
}

input CreateFileEntityRecordLinkInput {
  EntityID: String!
  FileID: String!
  RecordID: String!
}

input CreateFileInput {
  CategoryID: String
  ContentType: String
  Description: String
  Name: String!
  ProviderID: String!
  ProviderKey: String
  Status: String!
}

type CreateFilePayload {
  File: File_!
  NameExists: Boolean!
  UploadUrl: String!
}

input CreateFileStorageProviderInput {
  ClientDriverKey: String!
  Description: String
  IsActive: Boolean!
  Name: String!
  Priority: Int!
  ServerDriverKey: String!
}

input CreateLibraryInput {
  Description: String
  Name: String!
  SampleCode: String
  Status: String!
  TypeDefinitions: String
}

input CreateLibraryItemInput {
  LibraryID: String!
  Name: String!
  Type: String!
}

input CreateListCategoryInput {
  Description: String
  Name: String!
  ParentID: String
  UserID: String!
}

input CreateListDetailInput {
  ListID: String!
  RecordID: String!
  Sequence: Int!
}

input CreateListInput {
  CategoryID: String
  CompanyIntegrationID: String
  Description: String
  EntityID: String!
  ExternalSystemRecordID: String
  Name: String!
  UserID: String!
}

input CreateQueryCategoryInput {
  Description: String
  Name: String!
  ParentID: String
  UserID: String!
}

input CreateQueryFieldInput {
  ComputationDescription: String
  Description: String
  IsComputed: Boolean!
  IsSummary: Boolean!
  Name: String!
  QueryID: String!
  SQLBaseType: String!
  SQLFullType: String!
  Sequence: Int!
  SourceEntityID: String
  SourceFieldName: String
  SummaryDescription: String
}

input CreateQueryInput {
  CategoryID: String
  Description: String
  ExecutionCostRank: Int
  Feedback: String
  Name: String!
  OriginalSQL: String
  QualityRank: Int
  SQL: String
  Status: String!
  TechnicalDescription: String
  UserQuestion: String
}

input CreateQueryPermissionInput {
  QueryID: String!
  RoleID: String!
}

input CreateQueueInput {
  Description: String
  IsActive: Boolean!
  LastHeartbeat: Timestamp!
  Name: String!
  ProcessCwd: String
  ProcessHostName: String
  ProcessIPAddress: String
  ProcessMacAddress: String
  ProcessOSName: String
  ProcessOSVersion: String
  ProcessPID: Int
  ProcessPlatform: String
  ProcessUserID: String
  ProcessUserName: String
  ProcessVersion: String
  QueueTypeID: String!
}

input CreateQueueTaskInput {
  Comments: String
  Data: String
  EndedAt: Timestamp
  ErrorMessage: String
  Options: String
  Output: String
  QueueID: String!
  StartedAt: Timestamp
  Status: String!
}

input CreateRecommendationInput {
  RecommendationRunID: String!
  SourceEntityID: String!
  SourceEntityRecordID: String!
}

input CreateRecommendationItemInput {
  DestinationEntityID: String!
  DestinationEntityRecordID: String!
  MatchProbability: Float
  RecommendationID: String!
}

input CreateRecommendationProviderInput {
  Description: String
  Name: String!
}

input CreateRecommendationRunInput {
  Description: String
  EndDate: Timestamp
  RecommendationProviderID: String!
  RunByUserID: String!
  StartDate: Timestamp!
  Status: String!
}

input CreateRecordChangeInput {
  ChangedAt: Timestamp!
  ChangesDescription: String!
  ChangesJSON: String!
  Comments: String
  EntityID: String!
  ErrorLog: String
  FullRecordJSON: String!
  IntegrationID: String
  RecordID: String!
  ReplayRunID: String
  Source: String!
  Status: String!
  Type: String!
  UserID: String!
}

input CreateRecordChangeReplayRunInput {
  EndedAt: Timestamp
  StartedAt: Timestamp!
  Status: String!
  UserID: String!
}

input CreateRecordMergeDeletionLogInput {
  DeletedRecordID: String!
  ProcessingLog: String
  RecordMergeLogID: String!
  Status: String!
}

input CreateRecordMergeLogInput {
  ApprovalStatus: String!
  ApprovedByUserID: String
  Comments: String
  EntityID: String!
  InitiatedByUserID: String!
  ProcessingEndedAt: Timestamp
  ProcessingLog: String
  ProcessingStartedAt: Timestamp!
  ProcessingStatus: String!
  SurvivingRecordID: String!
}

input CreateReportCategoryInput {
  Description: String
  Name: String!
  ParentID: String
  UserID: String!
}

input CreateReportInput {
  CategoryID: String
  Configuration: String
  ConversationDetailID: String
  ConversationID: String
  DataContextID: String
  Description: String
  Name: String!
  OutputDeliveryTypeID: String
  OutputFormatTypeID: String
  OutputFrequency: String
  OutputTargetEmail: String
  OutputTriggerTypeID: String
  OutputWorkflowID: String
  SharingScope: String!
  UserID: String!
}

type CreateReportResultType {
  ErrorMessage: String!
  ReportID: String!
  ReportName: String!
  Success: Boolean!
}

input CreateReportSnapshotInput {
  ReportID: String!
  ResultSet: String!
  UserID: String!
}

input CreateRoleInput {
  Description: String
  DirectoryID: String
  Name: String!
  SQLName: String
}

input CreateScheduledActionInput {
  ActionID: String!
  CreatedByUserID: String!
  CronExpression: String
  CustomCronExpression: String
  DayOfMonth: Int
  DayOfWeek: String
  Description: String
  IntervalDays: Int
  Month: String
  Name: String!
  Status: String!
  Timezone: String!
  Type: String!
}

input CreateScheduledActionParamInput {
  ActionParamID: String!
  Comments: String
  ScheduledActionID: String!
  Value: String
  ValueType: String!
}

input CreateSchemaInfoInput {
  Comments: String
  EntityIDMax: Int!
  EntityIDMin: Int!
  SchemaName: String!
}

input CreateTemplateCategoryInput {
  Description: String
  Name: String!
  ParentID: String
  UserID: String!
}

input CreateTemplateContentInput {
  IsActive: Boolean!
  Priority: Int!
  TemplateID: String!
  TemplateText: String
  TypeID: String!
}

input CreateTemplateContentTypeInput {
  CodeType: String!
  Description: String
  Name: String!
}

input CreateTemplateInput {
  ActiveAt: Timestamp
  CategoryID: String
  Description: String
  DisabledAt: Timestamp
  IsActive: Boolean!
  Name: String!
  UserID: String!
  UserPrompt: String
}

input CreateTemplateParamInput {
  DefaultValue: String
  Description: String
  EntityID: String
  ExtraFilter: String
  IsRequired: Boolean!
  LinkedParameterField: String
  LinkedParameterName: String
  Name: String!
  RecordID: String
  TemplateID: String!
  Type: String!
}

input CreateUserApplicationEntityInput {
  EntityID: String!
  Sequence: Int!
  UserApplicationID: String!
}

input CreateUserApplicationInput {
  ApplicationID: String!
  IsActive: Boolean!
  Sequence: Int!
  UserID: String!
}

input CreateUserFavoriteInput {
  EntityID: String!
  RecordID: String!
  UserID: String!
}

input CreateUserInput {
  Email: String!
  EmployeeID: String
  FirstName: String
  IsActive: Boolean!
  LastName: String
  LinkedEntityID: String
  LinkedEntityRecordID: String
  LinkedRecordType: String!
  Name: String!
  Title: String
  Type: String!
}

input CreateUserNotificationInput {
  Message: String
  ReadAt: Timestamp
  ResourceConfiguration: String
  ResourceRecordID: String
  ResourceTypeID: String
  Title: String
  Unread: Boolean!
  UserID: String!
}

input CreateUserRoleInput {
  RoleID: String!
  UserID: String!
}

input CreateUserViewCategoryInput {
  Description: String
  EntityID: String!
  Name: String!
  ParentID: String
  UserID: String!
}

input CreateUserViewInput {
  CategoryID: String
  CustomFilterState: Boolean!
  CustomWhereClause: Boolean!
  Description: String
  EntityID: String!
  FilterState: String
  GridState: String
  IsDefault: Boolean!
  IsShared: Boolean!
  Name: String!
  SmartFilterEnabled: Boolean!
  SmartFilterExplanation: String
  SmartFilterPrompt: String
  SmartFilterWhereClause: String
  SortState: String
  UserID: String!
  WhereClause: String
}

input CreateUserViewRunDetailInput {
  RecordID: String!
  UserViewRunID: String!
}

input CreateUserViewRunInput {
  RunAt: Timestamp!
  RunByUserID: String!
  UserViewID: String!
}

input CreateVectorDatabaseInput {
  ClassKey: String
  DefaultURL: String
  Description: String
  Name: String!
}

input CreateVectorIndexInput {
  Description: String
  EmbeddingModelID: String!
  Name: String!
  VectorDatabaseID: String!
}

input CreateVersionInstallationInput {
  Comments: String
  InstallLog: String
  InstalledAt: Timestamp!
  MajorVersion: Int!
  MinorVersion: Int!
  PatchVersion: Int!
  Status: String!
  Type: String
}

input CreateWorkspaceInput {
  Description: String
  Name: String!
  UserID: String!
}

input CreateWorkspaceItemInput {
  Configuration: String
  Description: String
  Name: String!
  ResourceRecordID: String
  ResourceTypeID: String!
  Sequence: Int!
  WorkspaceID: String!
}

input Createflyway_schema_historyInput {
  checksum: Int
  description: String
  execution_time: Int!
  installed_by: String!
  installed_on: Timestamp!
  installed_rank: Int!
  script: String!
  success: Boolean!
  type: String!
  version: String
}

type DashboardCategory_ {
  DashboardCategoriesArray: [DashboardCategory_!]!
  DashboardsArray: [Dashboard_!]!
  Description: String
  ID: String!
  Name: String!
  Parent: String
  ParentID: String
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Dashboards are used to group resources into a single display pane for an end-user
"""
type Dashboard_ {
  Category: String
  CategoryID: String
  Description: String
  ID: String!
  Name: String!
  UIConfigDetails: String!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Data Context Items store information about each item within a Data Context. Each item stores a link to a view, query, or raw sql statement and can optionally cache the JSON representing the last run of that data object as well.
"""
type DataContextItem_ {
  DataContext: String!
  DataContextID: String!

  """
  Optionally used to cache results of an item. This can be used for performance optimization, and also for having snapshots of data for historical comparisons.
  """
  DataJSON: String
  Entity: String
  EntityID: String
  ID: String!

  """
  If DataJSON is populated, this field will show the date the the data was captured
  """
  LastRefreshedAt: Timestamp
  Query: String
  QueryID: String

  """
  The Primary Key value for the record, only used when Type='single_record'
  """
  RecordID: String

  """Only used when Type=sql"""
  SQL: String

  """
  The type of the item, either "view", "query", "full_entity", "single_record", or "sql"
  """
  Type: String!
  View: String
  ViewID: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Data Contexts are a primitive within the MemberJunction architecture. They store information about data contexts which are groups of data including views, queries, or raw SQL statements. Data contexts can be used in conversations, reports and more.
"""
type DataContext_ {
  ConversationsArray: [Conversation_!]!
  DataContextItemsArray: [DataContextItem_!]!
  Description: String
  ID: String!
  LastRefreshedAt: Timestamp
  Name: String!
  ReportsArray: [Report_!]!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input DatasetItemFilterTypeGQL {
  Filter: String!
  ItemCode: String!
}

"""A single item in a Dataset and can be sourced from multiple methods."""
type DatasetItem_ {
  Code: String!
  Dataset: String!
  DatasetID: String!
  DateFieldToCheck: String!
  Description: String
  Entity: String!
  EntityID: String!
  ID: String!
  Sequence: Int!
  WhereClause: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type DatasetResultType {
  DatasetID: String!
  DatasetName: String!
  LatestUpdateDate: Timestamp!
  Results: String!
  Status: String!
  Success: Boolean!
}

type DatasetStatusResultType {
  DatasetID: String!
  DatasetName: String!
  EntityUpdateDates: String!
  LatestUpdateDate: Timestamp!
  Status: String!
  Success: Boolean!
}

"""Cacheable sets of data that can span one or more items"""
type Dataset_ {
  DatasetItemsArray: [DatasetItem_!]!
  Description: String
  ID: String!
  Name: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input DeleteOptionsInput {
  SkipEntityAIActions: Boolean!
  SkipEntityActions: Boolean!
}

type DuplicateRunDetailMatch_ {
  Action: String!
  ApprovalStatus: String!
  DuplicateRunDetailID: String!
  ID: String!

  """Value between 0 and 1 designating the computed probability of a match"""
  MatchProbability: Float!
  MatchRecordID: String!

  """Either Vector or SP"""
  MatchSource: String!
  MatchedAt: Timestamp!
  MergeStatus: String!
  MergedAt: Timestamp!
  RecordMergeLogID: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type DuplicateRunDetail_ {
  DuplicateRunDetailMatchesArray: [DuplicateRunDetailMatch_!]!
  DuplicateRunID: String!
  ID: String!

  """
  If MatchStatus='Error' this field can be used to track the error from that phase of the process for logging/diagnostics.
  """
  MatchErrorMessage: String
  MatchStatus: String!
  MergeErrorMessage: String
  MergeStatus: String!
  RecordID: String!

  """
  If MatchStatus=Skipped, this field can be used to store the reason why the record was skipped
  """
  SkippedReason: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type DuplicateRun_ {
  ApprovalComments: String
  ApprovalStatus: String!
  ApprovedByUser: String
  ApprovedByUserID: String
  DuplicateRunDetailsArray: [DuplicateRunDetail_!]!
  EndedAt: Timestamp
  Entity: String!
  EntityID: String!
  ID: String!
  ProcessingErrorMessage: String
  ProcessingStatus: String!
  SourceList: String!
  SourceListID: String!
  StartedAt: Timestamp!
  StartedByUser: String!
  StartedByUserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EmployeeCompanyIntegration_ {
  CompanyIntegrationID: String!
  EmployeeID: String!
  ExternalSystemRecordID: String!
  ID: String!
  IsActive: Boolean!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EmployeeRole_ {
  EmployeeID: String!
  ID: String!
  Role: String!
  RoleID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EmployeeSkill_ {
  EmployeeID: String!
  ID: String!
  Skill: String!
  SkillID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""A list of employees across all units of your organization"""
type Employee_ {
  Active: Boolean!
  BCMID: String!
  CompanyID: String!
  Email: String!
  EmployeeCompanyIntegrationsArray: [EmployeeCompanyIntegration_!]!
  EmployeeRolesArray: [EmployeeRole_!]!
  EmployeeSkillsArray: [EmployeeSkill_!]!
  EmployeesArray: [Employee_!]!
  FirstLast: String
  FirstName: String!
  ID: String!
  LastName: String!
  Phone: String
  Supervisor: String
  SupervisorEmail: String
  SupervisorFirstName: String
  SupervisorID: String
  SupervisorLastName: String
  Title: String
  UsersArray: [User_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Tracks the AI actions that should be invoked based on changes to records within a given entity.
"""
type EntityAIAction_ {
  AIAction: String!
  AIActionID: String!
  AIModel: String!
  AIModelID: String!
  Comments: String
  Entity: String!
  EntityID: String!
  ID: String!
  Name: String!
  OutputEntity: String
  OutputEntityID: String
  OutputField: String
  OutputType: String!
  Prompt: String
  SkipIfOutputFieldNotEmpty: Boolean!
  TriggerEvent: String!
  UserMessage: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Optional use. Maps Action Filters to specific EntityAction instances, specifying execution order and status. This allows for “pre-processing” before an Action actually is fired off, to check for various state/dirty/value conditions.
"""
type EntityActionFilter_ {
  ActionFilterID: String!
  EntityActionID: String!
  ID: String!

  """Order of filter execution."""
  Sequence: Int!

  """Status of the entity action filter (Pending, Active, Disabled)."""
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Stores the possible invocation types of an action within the context of an entity. Examples would be: Record Created/Updated/Deleted/Accessed as well as things like “View” or “List” where you could run an EntityAction against an entire set of records in a view or list – either by user click or programmatically.
"""
type EntityActionInvocationType_ {
  """Description of the invocation type."""
  Description: String
  DisplaySequence: Int!
  EntityActionInvocationsArray: [EntityActionInvocation_!]!
  ID: String!

  """Name of the invocation type such as Record Created/Updated/etc."""
  Name: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Links invocation types to entity actions – for example you might link a particular EntityAction to just “Create Record” and you might also have a second item in this table allowing the same Entity Action to be invoked from a User View or List, on demand.
"""
type EntityActionInvocation_ {
  EntityActionID: String!
  ID: String!
  InvocationType: String!
  InvocationTypeID: String!

  """Status of the entity action invocation (Pending, Active, Disabled)."""
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Stores paramater mappings to enable Entity Actions to automatically invoke Actions
"""
type EntityActionParam_ {
  ActionParam: String!
  ActionParamID: String!

  """Additional comments regarding the parameter."""
  Comments: String
  EntityActionID: String!
  ID: String!

  """
  Value of the parameter, used only when ValueType is Static or Script. When value is Script, any valid JavaScript code can be provided. The script will have access to an object called EntityActionContext. This object will have a property called EntityObject on it that will contain the BaseEntity derived sub-class with the current data for the entity object this action is operating against. The script must provide the parameter value to the EntityActionContext.result property. This scripting capabilty is designed for very small and simple code, for anything of meaningful complexity, create a sub-class instead.
  """
  Value: String

  """Type of the value, which can be Static, Entity Object, or Script."""
  ValueType: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Links entities to actions - this is the main place where you define the actions that part of, or available, for a given entity.
"""
type EntityAction_ {
  Action: String!
  ActionID: String!
  Entity: String!
  EntityActionFiltersArray: [EntityActionFilter_!]!
  EntityActionInvocationsArray: [EntityActionInvocation_!]!
  EntityActionParamsArray: [EntityActionParam_!]!
  EntityID: String!
  ID: String!

  """Status of the entity action (Pending, Active, Disabled)."""
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Mapping between entity fields and communication base message types with priority
"""
type EntityCommunicationField_ {
  EntityCommunicationMessageTypeID: String!

  """
  Name of the field in the entity that maps to the communication base message type
  """
  FieldName: String!
  ID: String!

  """Priority of the field for the communication base message type"""
  Priority: Int!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Mapping between entities and communication base message types"""
type EntityCommunicationMessageType_ {
  BaseMessageType: String!
  BaseMessageTypeID: String!
  Entity: String!
  EntityCommunicationFieldsArray: [EntityCommunicationField_!]!
  EntityID: String!
  ID: String!

  """Indicates whether the message type is active"""
  IsActive: Boolean!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EntityDependencyResult {
  EntityName: String!
  FieldName: String!
  RelatedEntityName: String!
}

type EntityDocumentRun_ {
  EndedAt: Timestamp
  EntityDocument: String!
  EntityDocumentID: String!
  ID: String!
  StartedAt: Timestamp

  """Can be Pending, In Progress, Completed, or Failed"""
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EntityDocumentSetting_ {
  Comments: String
  EntityDocument: String!
  EntityDocumentID: String!
  ID: String!
  Name: String!
  Value: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EntityDocumentType_ {
  Description: String
  EntityDocumentsArray: [EntityDocument_!]!
  ID: String!
  Name: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EntityDocument_ {
  AIModel: String!
  AIModelID: String!

  """
  Value between 0 and 1 that determines what is considered an absolute matching record. Value must be >= PotentialMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.
  """
  AbsoluteMatchThreshold: Float!
  Entity: String!
  EntityDocumentRunsArray: [EntityDocumentRun_!]!
  EntityDocumentSettingsArray: [EntityDocumentSetting_!]!
  EntityID: String!
  EntityRecordDocumentsArray: [EntityRecordDocument_!]!
  ID: String!
  Name: String!

  """
  Value between 0 and 1 that determines what is considered a potential matching record. Value must be <= AbsoluteMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.
  """
  PotentialMatchThreshold: Float!
  Status: String!
  Template: String!
  TemplateID: String!
  Type: String!
  TypeID: String!
  VectorDatabase: String!
  VectorDatabaseID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EntityFieldValue_ {
  Code: String
  Description: String
  Entity: String!
  EntityField: String!
  EntityFieldID: String!
  EntityID: String!
  ID: String!
  Sequence: Int!
  Value: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""List of all fields within each entity with metadata about each field"""
type EntityField_ {
  """
  If set to 1, this field will be considered updateable by the API and object model. For this field to have effect, the column type must be updateable (e.g. not part of the primary key and not auto-increment)
  """
  AllowUpdateAPI: Boolean!

  """
  If set to 1, and if AllowUpdateAPI=1, the field can be edited within a view when the view is in edit mode.
  """
  AllowUpdateInView: Boolean!

  """Does the column allow null or not (auto maintained by CodeGen)"""
  AllowsNull: Boolean!

  """
  If this field automatically increments within the table, this field is set to 1 (auto maintained by CodeGen)
  """
  AutoIncrement: Boolean!

  """
  When set to 1 (default), whenever a description is modified in the column within the underlying view (first choice) or table (second choice), the Description column in the entity field definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity field definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.
  """
  AutoUpdateDescription: Boolean!
  BaseTable: String!
  BaseView: String!

  """
  Used for generating custom tabs in the generated forms, only utilized if GeneratedFormSection=Category
  """
  Category: String

  """
  The type of code associated with this field. Only used when the ExtendedType field is set to "Code"
  """
  CodeType: String

  """Determines the default width for this field when included in a view"""
  DefaultColumnWidth: Int

  """
  If set to 1, this field will be included by default in any new view created by a user.
  """
  DefaultInView: Boolean!

  """
  If a default value is defined for the field it is stored here (auto maintained by CodeGen)
  """
  DefaultValue: String

  """Descriptive text explaining the purpose of the field"""
  Description: String

  """A user friendly alternative to the field name"""
  DisplayName: String
  Entity: String!
  EntityClassName: String
  EntityCodeName: String
  EntityFieldValuesArray: [EntityFieldValue_!]!
  EntityID: String!

  """
  Optional, used for "Soft Keys" to link records to different entity/record combinations on a per-record basis (for example the FileEntityRecordLink table has an EntityID/RecordID field pair. For that entity, the RecordID specifies "EntityID" for this field. This information allows MJ to detect soft keys/links for dependency detection, merging and for preventing orphaned soft-linked records during delete operations.
  """
  EntityIDFieldName: String

  """
  Defines extended behaviors for a field such as for Email, Web URLs, Code, etc.
  """
  ExtendedType: String

  """
  If set to 1, CodeGen will automatically generate a Full Text Catalog/Index in the database and include this field in the search index.
  """
  FullTextSearchEnabled: Boolean!

  """
  When set to Top, the field will be placed in a "top area" on the top of a generated form and visible regardless of which tab is displayed. When set to "category" Options: Top, Category, Details
  """
  GeneratedFormSection: String!
  ID: String!

  """
  If set to 1, this field will be included in the generated form by CodeGen. If set to 0, this field will be excluded from the generated form. For custom forms, this field has no effect as the layout is controlled independently.
  """
  IncludeInGeneratedForm: Boolean!

  """
  If set to 1, this column will be included in user search queries for both traditional and full text search
  """
  IncludeInUserSearchAPI: Boolean!

  """
  If set to 1, the "Name" field of the Related Entity will be included in this entity as a virtual field
  """
  IncludeRelatedEntityNameFieldInBaseView: Boolean!

  """
  If set to 1, this column will be used as the "Name" field for the entity and will be used to display the name of the record in various places in the UI.
  """
  IsNameField: Boolean!

  """
  Indicates if the field is part of the primary key for the entity (auto maintained by CodeGen)
  """
  IsPrimaryKey: Boolean!

  """Indicates if the field must have unique values within the entity."""
  IsUnique: Boolean!

  """NULL"""
  IsVirtual: Boolean!

  """SQL data length (auto maintained by CodeGen)"""
  Length: Int

  """Name of the field within the database table"""
  Name: String!

  """SQL precision (auto maintained by CodeGen)"""
  Precision: Int
  RelatedEntity: String
  RelatedEntityBaseTable: String
  RelatedEntityBaseView: String
  RelatedEntityClassName: String
  RelatedEntityCodeName: String

  """
  Controls the generated form in the MJ Explorer UI - defaults to a search box, other option is a drop down. Possible values are Search and Dropdown
  """
  RelatedEntityDisplayType: String!

  """
  Name of the field in the Related Entity that this field links to (auto maintained by CodeGen)
  """
  RelatedEntityFieldName: String
  RelatedEntityID: String
  RelatedEntityNameFieldMap: String
  RelatedEntitySchemaName: String

  """SQL scale (auto maintained by CodeGen)"""
  Scale: Int
  SchemaName: String!

  """Display order of the field within the entity"""
  Sequence: Int!

  """SQL Data type (auto maintained by CodeGen)"""
  Type: String!

  """NULL"""
  UserSearchParamFormatAPI: String

  """
  Possible Values of None, List, ListOrUserEntry - the last option meaning that the list of possible values are options, but a user can enter anything else desired too.
  """
  ValueListType: String!

  """NULL"""
  ViewCellTemplate: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Security settings for each entity"""
type EntityPermission_ {
  CanCreate: Boolean!
  CanDelete: Boolean!
  CanRead: Boolean!
  CanUpdate: Boolean!
  CreateRLSFilter: String
  CreateRLSFilterID: String
  DeleteRLSFilter: String
  DeleteRLSFilterID: String
  Entity: String!
  EntityID: String!
  ID: String!
  ReadRLSFilter: String
  ReadRLSFilterID: String
  RoleID: String!
  RoleName: String!
  RoleSQLName: String
  UpdateRLSFilter: String
  UpdateRLSFilterID: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EntityRecordDocument_ {
  DocumentText: String
  Entity: String!
  EntityDocument: String!
  EntityDocumentID: String!
  EntityID: String!
  EntityRecordUpdatedAt: Timestamp!
  ID: String!
  RecordID: String!
  VectorID: String
  VectorIndex: String!
  VectorIndexID: String!
  VectorJSON: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input EntityRecordNameInput {
  CompositeKey: CompositeKeyInputType!
  EntityName: String!
}

type EntityRecordNameResult {
  CompositeKey: CompositeKeyOutputType!
  EntityName: String!
  RecordName: String
  Status: String!
  Success: Boolean!
}

"""
This table stores a list of components that are available for displaying relationships in the MJ Explorer UI
"""
type EntityRelationshipDisplayComponent_ {
  Description: String
  EntityRelationshipsArray: [EntityRelationship_!]!
  ID: String!
  Name: String!

  """
  The type of relationship the component displays. Valid values are "One to Many", "Many to Many", or "Both".
  """
  RelationshipType: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Metadata about relationships between entities including display preferences for the UI
"""
type EntityRelationship_ {
  BundleInAPI: Boolean!

  """
  If DisplayComponentID is specified, this field can optionally be used to track component-specific and relationship-specific configuration details that will be used by CodeGen to provide to the display component selected.
  """
  DisplayComponentConfiguration: String
  DisplayComponentID: String

  """If specified, the icon """
  DisplayIcon: String

  """
  When Related Entity Icon - uses the icon from the related entity, if one exists. When Custom, uses the value in the DisplayIcon field in this record, and when None, no icon is displayed
  """
  DisplayIconType: String!

  """
  When unchecked the relationship will NOT be displayed on the generated form
  """
  DisplayInForm: Boolean!
  DisplayLocation: String!

  """
  Optional, when specified this value overrides the related entity name for the label on the tab
  """
  DisplayName: String
  DisplayUserViewID: String
  DisplayUserViewName: String
  Entity: String!
  EntityBaseTable: String!
  EntityBaseView: String!
  EntityID: String!
  EntityKeyField: String
  ID: String!
  IncludeInParentAllQuery: Boolean!
  JoinEntityInverseJoinField: String
  JoinEntityJoinField: String
  JoinView: String
  RelatedEntity: String!
  RelatedEntityBaseTable: String!
  RelatedEntityBaseTableCodeName: String
  RelatedEntityBaseView: String!
  RelatedEntityClassName: String
  RelatedEntityCodeName: String
  RelatedEntityID: String!
  RelatedEntityJoinField: String!

  """
  Used for display order in generated forms and in other places in the UI where relationships for an entity are shown
  """
  Sequence: Int!
  Type: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type EntitySetting_ {
  Comments: String
  Entity: String!
  EntityID: String!
  ID: String!
  Name: String!
  Value: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Catalog of all entities across all schemas"""
type Entity_ {
  """
  If set to 1, a GraphQL query will be enabled that allows access to all rows in the entity.
  """
  AllowAllRowsAPI: Boolean!

  """
  Global flag controlling if creates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
  """
  AllowCreateAPI: Boolean!

  """
  Global flag controlling if deletes are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
  """
  AllowDeleteAPI: Boolean!

  """
  This field must be turned on in order to enable merging of records for the entity. For AllowRecordMerge to be turned on, AllowDeleteAPI must be set to 1, and DeleteType must be set to Soft
  """
  AllowRecordMerge: Boolean!

  """
  Global flag controlling if updates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
  """
  AllowUpdateAPI: Boolean!

  """
  Enabling this bit will result in search being possible at the API and UI layers
  """
  AllowUserSearchAPI: Boolean!
  ApplicationEntitiesArray: [ApplicationEntity_!]!
  AuditLogsArray: [AuditLog_!]!

  """
  When set to 1, accessing a record by an end-user will result in an Audit Log record being created
  """
  AuditRecordAccess: Boolean!

  """
  When set to 1, users running a view against this entity will result in an Audit Log record being created.
  """
  AuditViewRuns: Boolean!

  """
  When set to 1 (default), whenever a description is modified in the underlying view (first choice) or table (second choice), the Description column in the entity definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.
  """
  AutoUpdateDescription: Boolean!
  BaseTable: String!
  BaseTableCodeName: String
  BaseView: String!

  """When set to 0, CodeGen no longer generates a base view for the entity."""
  BaseViewGenerated: Boolean!

  """
  When set to 1, the deleted spDelete will pre-process deletion to related entities that have 1:M cardinality with this entity. This does not have effect if spDeleteGenerated = 0
  """
  CascadeDeletes: Boolean!
  ClassName: String
  CodeName: String
  CompanyIntegrationRecordMapsArray: [CompanyIntegrationRecordMap_!]!
  CompanyIntegrationRunDetailsArray: [CompanyIntegrationRunDetail_!]!
  ConversationsArray: [Conversation_!]!

  """Set to 1 if a custom resolver has been created for the entity."""
  CustomResolverAPI: Boolean!
  DataContextItemsArray: [DataContextItem_!]!
  DatasetItemsArray: [DatasetItem_!]!

  """
  Hard deletes physically remove rows from the underlying BaseTable. Soft deletes do not remove rows but instead mark the row as deleted by using the special field __mj_DeletedAt which will automatically be added to the entity's basetable by the CodeGen tool.
  """
  DeleteType: String!
  Description: String
  DuplicateRunsArray: [DuplicateRun_!]!
  EntitiesArray: [Entity_!]!
  EntityAIActionsArray: [EntityAIAction_!]!
  EntityActionsArray: [EntityAction_!]!
  EntityCommunicationMessageTypesArray: [EntityCommunicationMessageType_!]!
  EntityDocumentsArray: [EntityDocument_!]!
  EntityFieldsArray: [EntityField_!]!
  EntityObjectSubclassImport: String
  EntityObjectSubclassName: String
  EntityPermissionsArray: [EntityPermission_!]!
  EntityRecordDocumentsArray: [EntityRecordDocument_!]!
  EntityRelationshipsArray: [EntityRelationship_!]!
  EntitySettingsArray: [EntitySetting_!]!
  FileEntityRecordLinksArray: [FileEntityRecordLink_!]!
  FullTextCatalog: String
  FullTextCatalogGenerated: Boolean!
  FullTextIndex: String
  FullTextIndexGenerated: Boolean!
  FullTextSearchEnabled: Boolean!
  FullTextSearchFunction: String
  FullTextSearchFunctionGenerated: Boolean!
  ID: String!

  """
  Optional, specify an icon (CSS Class) for each entity for display in the UI
  """
  Icon: String

  """
  If set to 0, the entity will not be available at all in the GraphQL API or the object model.
  """
  IncludeInAPI: Boolean!
  IntegrationURLFormatsArray: [IntegrationURLFormat_!]!
  ListsArray: [List_!]!
  Name: String!
  NameSuffix: String
  ParentBaseTable: String
  ParentBaseView: String
  ParentEntity: String
  ParentID: String

  """
  Used to specify a field within the entity that in turn contains the field name that will be used for record-level communication preferences. For example in a hypothetical entity called Contacts, say there is a field called PreferredComm and that field had possible values of Email1, SMS, and Phone, and those value in turn corresponded to field names in the entity. Each record in the Contacts entity could have a specific preference for which field would be used for communication. The MJ Communication Framework will use this information when available, as a priority ahead of the data in the Entity Communication Fields entity which is entity-level and not record-level.
  """
  PreferredCommunicationField: String
  QueryFieldsArray: [QueryField_!]!
  RecommendationItemsArray: [RecommendationItem_!]!
  RecommendationsArray: [Recommendation_!]!
  RecordChangesArray: [RecordChange_!]!
  RecordMergeLogsArray: [RecordMergeLog_!]!

  """
  When another entity links to this entity with a foreign key, this is the default component type that will be used in the UI. CodeGen will populate the RelatedEntityDisplayType column in the Entity Fields entity with whatever is provided here whenever a new foreign key is detected by CodeGen. The selection can be overridden on a per-foreign-key basis in each row of the Entity Fields entity.
  """
  RelationshipDefaultDisplayType: String!
  ResourceTypesArray: [ResourceType_!]!
  SchemaName: String!
  TaggedItemsArray: [TaggedItem_!]!
  TemplateParamsArray: [TemplateParam_!]!

  """
  When set to 1, changes made via the MemberJunction architecture will result in tracking records being created in the RecordChange table. In addition, when turned on CodeGen will ensure that your table has two fields: __mj_CreatedAt and __mj_UpdatedAt which are special fields used in conjunction with the RecordChange table to track changes to rows in your entity.
  """
  TrackRecordChanges: Boolean!
  UserApplicationEntitiesArray: [UserApplicationEntity_!]!
  UserFavoritesArray: [UserFavorite_!]!
  UserFormGenerated: Boolean!
  UserRecordLogsArray: [UserRecordLog_!]!
  UserViewCategoriesArray: [UserViewCategory_!]!
  UserViewMaxRows: Int
  UserViewsArray: [UserView_!]!
  UsersArray: [User_!]!
  VirtualEntity: Boolean!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
  spCreate: String
  spCreateGenerated: Boolean!
  spDelete: String
  spDeleteGenerated: Boolean!

  """
  When specified, this stored procedure is used to find matching records in this particular entity. The convention is to pass in the primary key(s) columns for the given entity to the procedure and the return will be zero to many rows where there is a column for each primary key field(s) and a ProbabilityScore (numeric(1,12)) column that has a 0 to 1 value of the probability of a match.
  """
  spMatch: String
  spUpdate: String
  spUpdateGenerated: Boolean!
}

type ErrorLog_ {
  Category: String
  Code: String
  CompanyIntegrationRunDetailID: String
  CompanyIntegrationRunID: String
  CreatedBy: String
  Details: String
  ID: String!
  Message: String
  Status: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Table to store navigation items for MemberJunction Explorer"""
type ExplorerNavigationItem_ {
  """Administrator comments, not shown to the end user in MJ Explorer app"""
  Comments: String

  """
  Description of the navigation item, shown to the user on hover or in larger displays
  """
  Description: String

  """Unique identifier for each navigation item"""
  ID: String!

  """
  Optional, CSS class for an icon to be displayed with the navigation item
  """
  IconCSSClass: String

  """
  Indicates if the navigation item is active; allows turning off items in the UI without deleting them from the metadata
  """
  IsActive: Boolean!

  """Unique name of the navigation item displayed to the user"""
  Name: String!

  """
  The route for the navigation item relative to the app main URL, using Angular syntax like "entity/:entityName"
  """
  Route: String!

  """
  Sequence number for the navigation item, must be unique and greater than 0
  """
  Sequence: Int!

  """
  Controls if the navigation item is shown on the Home screen for MJ Explorer
  """
  ShowInHomeScreen: Boolean!

  """
  Controls if the item is shown in the left navigation drawer in the MJ Explorer app or not.
  """
  ShowInNavigationDrawer: Boolean!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input FieldMapping {
  FieldName: String!
  Value: String!
}

type FieldMappingOutput {
  FieldName: String!
  Value: String!
}

type FileCategory_ {
  Description: String
  FileCategoriesArray: [FileCategory_!]!
  FilesArray: [File_!]!
  ID: String!
  Name: String!
  Parent: String
  ParentID: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type FileEntityRecordLink_ {
  Entity: String!
  EntityID: String!
  File: String!
  FileID: String!
  ID: String!
  RecordID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type FileStorageProvider_ {
  ClientDriverKey: String!
  Description: String
  FilesArray: [File_!]!
  ID: String!
  IsActive: Boolean!
  Name: String!
  Priority: Int!
  ServerDriverKey: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type File_ {
  Category: String
  CategoryID: String
  ContentType: String
  Description: String
  DownloadUrl: String!
  FileEntityRecordLinksArray: [FileEntityRecordLink_!]!
  ID: String!
  Name: String!
  Provider: String!
  ProviderID: String!
  ProviderKey: String

  """Pending, Uploading, Uploaded, Deleting, Deleted"""
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Used to generate web links for end users to easily access resources in a source system. URL Formats support templating to inject various field values at run-time to take a user directly to a resource in a source system.
"""
type IntegrationURLFormat_ {
  Comments: String
  EntityID: String!
  FullURLFormat: String
  ID: String!
  Integration: String!
  IntegrationID: String!
  NavigationBaseURL: String

  """
  The URL Format for the given integration including the ability to include markup with fields from the integration
  """
  URLFormat: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Catalog of all integrations that have been configured in the system."""
type Integration_ {
  BatchMaxRequestCount: Int!
  BatchRequestWaitTime: Int!
  ClassName: String
  CompanyIntegrationsArray: [CompanyIntegration_!]!
  Description: String
  ID: String!
  ImportPath: String
  IntegrationURLFormatsArray: [IntegrationURLFormat_!]!
  Name: String!
  NavigationBaseURL: String
  RecordChangesArray: [RecordChange_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input KeyValuePairInput {
  Key: String!
  Value: String
}

input KeyValuePairInputType {
  FieldName: String!
  Value: String!
}

type KeyValuePairOutputType {
  FieldName: String!
  Value: String!
}

"""Table to store individual library items"""
type LibraryItem_ {
  ID: String!
  Library: String!
  LibraryID: String!
  Name: String!

  """Type of the library item for example Class, Interface, etc."""
  Type: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Stores information about the available libraries, including a list of classes/functions, type definitions, and sample code. You can add additional custom libraries here to make them avaialable to code generation features within the system.
"""
type Library_ {
  ActionLibrariesArray: [ActionLibrary_!]!
  Description: String
  ID: String!
  LibraryItemsArray: [LibraryItem_!]!
  Name: String!

  """
  Examples of code use of the classes and/or functions from within the library
  """
  SampleCode: String

  """
  Status of the library, only libraries marked as Active will be available for use by generated code. If a library was once active but no longer is, existing code that used the library will not be affected.
  """
  Status: String!

  """
  Code showing the types and functions defined in the library to be used for reference by humans and AI
  """
  TypeDefinitions: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type ListCategory_ {
  Description: String
  ID: String!
  ListCategoriesArray: [ListCategory_!]!
  ListsArray: [List_!]!
  Name: String!
  Parent: String
  ParentID: String
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Tracks the records within each list."""
type ListDetail_ {
  ID: String!
  List: String!
  ListID: String!
  RecordID: String!
  Sequence: Int!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Static lists are useful for controlling a set of data for a given entity. These can be used programatically for applications like logging and tracking long-running tasks and also by end users for tracking any particular list of records they want to directly control the set.
"""
type List_ {
  Category: String
  CategoryID: String
  CompanyIntegrationID: String
  Description: String
  DuplicateRunsArray: [DuplicateRun_!]!
  Entity: String!
  EntityID: String!
  ExternalSystemRecordID: String
  ID: String!
  ListDetailsArray: [ListDetail_!]!
  Name: String!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type Mutation {
  CreateAIAction(input: CreateAIActionInput!): AIAction_!
  CreateAIModel(input: CreateAIModelInput!): AIModel_!
  CreateAIModelAction(input: CreateAIModelActionInput!): AIModelAction_!
  CreateAIModelType(input: CreateAIModelTypeInput!): AIModelType_!
  CreateAction(input: CreateActionInput!): Action_!
  CreateActionAuthorization(input: CreateActionAuthorizationInput!): ActionAuthorization_!
  CreateActionCategory(input: CreateActionCategoryInput!): ActionCategory_!
  CreateActionContext(input: CreateActionContextInput!): ActionContext_!
  CreateActionContextType(input: CreateActionContextTypeInput!): ActionContextType_!
  CreateActionExecutionLog(input: CreateActionExecutionLogInput!): ActionExecutionLog_!
  CreateActionFilter(input: CreateActionFilterInput!): ActionFilter_!
  CreateActionLibrary(input: CreateActionLibraryInput!): ActionLibrary_!
  CreateActionParam(input: CreateActionParamInput!): ActionParam_!
  CreateActionResultCode(input: CreateActionResultCodeInput!): ActionResultCode_!
  CreateApplication(input: CreateApplicationInput!): Application_!
  CreateApplicationEntity(input: CreateApplicationEntityInput!): ApplicationEntity_!
  CreateApplicationSetting(input: CreateApplicationSettingInput!): ApplicationSetting_!
  CreateAuditLog(input: CreateAuditLogInput!): AuditLog_!
  CreateCommunicationBaseMessageType(input: CreateCommunicationBaseMessageTypeInput!): CommunicationBaseMessageType_!
  CreateCommunicationLog(input: CreateCommunicationLogInput!): CommunicationLog_!
  CreateCommunicationProvider(input: CreateCommunicationProviderInput!): CommunicationProvider_!
  CreateCommunicationProviderMessageType(input: CreateCommunicationProviderMessageTypeInput!): CommunicationProviderMessageType_!
  CreateCommunicationRun(input: CreateCommunicationRunInput!): CommunicationRun_!
  CreateCompany(input: CreateCompanyInput!): Company_!
  CreateCompanyIntegrationRecordMap(input: CreateCompanyIntegrationRecordMapInput!): CompanyIntegrationRecordMap_!
  CreateConversation(input: CreateConversationInput!): Conversation_!
  CreateConversationDetail(input: CreateConversationDetailInput!): ConversationDetail_!
  CreateDashboard(input: CreateDashboardInput!): Dashboard_!
  CreateDashboardCategory(input: CreateDashboardCategoryInput!): DashboardCategory_!
  CreateDataContext(input: CreateDataContextInput!): DataContext_!
  CreateDataContextItem(input: CreateDataContextItemInput!): DataContextItem_!
  CreateDuplicateRun(input: CreateDuplicateRunInput!): DuplicateRun_!
  CreateDuplicateRunDetail(input: CreateDuplicateRunDetailInput!): DuplicateRunDetail_!
  CreateDuplicateRunDetailMatch(input: CreateDuplicateRunDetailMatchInput!): DuplicateRunDetailMatch_!
  CreateEmployee(input: CreateEmployeeInput!): Employee_!
  CreateEntity(input: CreateEntityInput!): Entity_!
  CreateEntityAIAction(input: CreateEntityAIActionInput!): EntityAIAction_!
  CreateEntityAction(input: CreateEntityActionInput!): EntityAction_!
  CreateEntityActionFilter(input: CreateEntityActionFilterInput!): EntityActionFilter_!
  CreateEntityActionInvocation(input: CreateEntityActionInvocationInput!): EntityActionInvocation_!
  CreateEntityActionInvocationType(input: CreateEntityActionInvocationTypeInput!): EntityActionInvocationType_!
  CreateEntityActionParam(input: CreateEntityActionParamInput!): EntityActionParam_!
  CreateEntityCommunicationField(input: CreateEntityCommunicationFieldInput!): EntityCommunicationField_!
  CreateEntityCommunicationMessageType(input: CreateEntityCommunicationMessageTypeInput!): EntityCommunicationMessageType_!
  CreateEntityDocument(input: CreateEntityDocumentInput!): EntityDocument_!
  CreateEntityDocumentRun(input: CreateEntityDocumentRunInput!): EntityDocumentRun_!
  CreateEntityDocumentSetting(input: CreateEntityDocumentSettingInput!): EntityDocumentSetting_!
  CreateEntityDocumentType(input: CreateEntityDocumentTypeInput!): EntityDocumentType_!
  CreateEntityField(input: CreateEntityFieldInput!): EntityField_!
  CreateEntityPermission(input: CreateEntityPermissionInput!): EntityPermission_!
  CreateEntityRecordDocument(input: CreateEntityRecordDocumentInput!): EntityRecordDocument_!
  CreateEntityRelationship(input: CreateEntityRelationshipInput!): EntityRelationship_!
  CreateEntityRelationshipDisplayComponent(input: CreateEntityRelationshipDisplayComponentInput!): EntityRelationshipDisplayComponent_!
  CreateEntitySetting(input: CreateEntitySettingInput!): EntitySetting_!
  CreateExplorerNavigationItem(input: CreateExplorerNavigationItemInput!): ExplorerNavigationItem_!
  CreateFile(input: CreateFileInput!): CreateFilePayload!
  CreateFileCategory(input: CreateFileCategoryInput!): FileCategory_!
  CreateFileEntityRecordLink(input: CreateFileEntityRecordLinkInput!): FileEntityRecordLink_!
  CreateFileStorageProvider(input: CreateFileStorageProviderInput!): FileStorageProvider_!
  CreateLibrary(input: CreateLibraryInput!): Library_!
  CreateLibraryItem(input: CreateLibraryItemInput!): LibraryItem_!
  CreateList(input: CreateListInput!): List_!
  CreateListCategory(input: CreateListCategoryInput!): ListCategory_!
  CreateListDetail(input: CreateListDetailInput!): ListDetail_!
  CreateQuery(input: CreateQueryInput!): Query_!
  CreateQueryCategory(input: CreateQueryCategoryInput!): QueryCategory_!
  CreateQueryField(input: CreateQueryFieldInput!): QueryField_!
  CreateQueryPermission(input: CreateQueryPermissionInput!): QueryPermission_!
  CreateQueue(input: CreateQueueInput!): Queue_!
  CreateQueueTask(input: CreateQueueTaskInput!): QueueTask_!
  CreateRecommendation(input: CreateRecommendationInput!): Recommendation_!
  CreateRecommendationItem(input: CreateRecommendationItemInput!): RecommendationItem_!
  CreateRecommendationProvider(input: CreateRecommendationProviderInput!): RecommendationProvider_!
  CreateRecommendationRun(input: CreateRecommendationRunInput!): RecommendationRun_!
  CreateRecordChange(input: CreateRecordChangeInput!): RecordChange_!
  CreateRecordChangeReplayRun(input: CreateRecordChangeReplayRunInput!): RecordChangeReplayRun_!
  CreateRecordMergeDeletionLog(input: CreateRecordMergeDeletionLogInput!): RecordMergeDeletionLog_!
  CreateRecordMergeLog(input: CreateRecordMergeLogInput!): RecordMergeLog_!
  CreateReport(input: CreateReportInput!): Report_!
  CreateReportCategory(input: CreateReportCategoryInput!): ReportCategory_!
  CreateReportFromConversationDetailID(ConversationDetailID: String!): CreateReportResultType!
  CreateReportSnapshot(input: CreateReportSnapshotInput!): ReportSnapshot_!
  CreateRole(input: CreateRoleInput!): Role_!
  CreateScheduledAction(input: CreateScheduledActionInput!): ScheduledAction_!
  CreateScheduledActionParam(input: CreateScheduledActionParamInput!): ScheduledActionParam_!
  CreateSchemaInfo(input: CreateSchemaInfoInput!): SchemaInfo_!
  CreateTemplate(input: CreateTemplateInput!): Template_!
  CreateTemplateCategory(input: CreateTemplateCategoryInput!): TemplateCategory_!
  CreateTemplateContent(input: CreateTemplateContentInput!): TemplateContent_!
  CreateTemplateContentType(input: CreateTemplateContentTypeInput!): TemplateContentType_!
  CreateTemplateParam(input: CreateTemplateParamInput!): TemplateParam_!
  CreateUser(input: CreateUserInput!): User_!
  CreateUserApplication(input: CreateUserApplicationInput!): UserApplication_!
  CreateUserApplicationEntity(input: CreateUserApplicationEntityInput!): UserApplicationEntity_!
  CreateUserFavorite(input: CreateUserFavoriteInput!): UserFavorite_!
  CreateUserNotification(input: CreateUserNotificationInput!): UserNotification_!
  CreateUserRole(input: CreateUserRoleInput!): UserRole_!
  CreateUserView(input: CreateUserViewInput!): UserView_!
  CreateUserViewCategory(input: CreateUserViewCategoryInput!): UserViewCategory_!
  CreateUserViewRun(input: CreateUserViewRunInput!): UserViewRun_!
  CreateUserViewRunDetail(input: CreateUserViewRunDetailInput!): UserViewRunDetail_!
  CreateVectorDatabase(input: CreateVectorDatabaseInput!): VectorDatabase_!
  CreateVectorIndex(input: CreateVectorIndexInput!): VectorIndex_!
  CreateVersionInstallation(input: CreateVersionInstallationInput!): VersionInstallation_!
  CreateWorkspace(input: CreateWorkspaceInput!): Workspace_!
  CreateWorkspaceItem(input: CreateWorkspaceItemInput!): WorkspaceItem_!
  Createflyway_schema_history(input: Createflyway_schema_historyInput!): flyway_schema_history_!
  DeleteAIAction(ID: String!, options___: DeleteOptionsInput!): AIAction_!
  DeleteAIModel(ID: String!, options___: DeleteOptionsInput!): AIModel_!
  DeleteAIModelAction(ID: String!, options___: DeleteOptionsInput!): AIModelAction_!
  DeleteAIModelType(ID: String!, options___: DeleteOptionsInput!): AIModelType_!
  DeleteAction(ID: String!, options___: DeleteOptionsInput!): Action_!
  DeleteActionAuthorization(ID: String!, options___: DeleteOptionsInput!): ActionAuthorization_!
  DeleteActionCategory(ID: String!, options___: DeleteOptionsInput!): ActionCategory_!
  DeleteActionContext(ID: String!, options___: DeleteOptionsInput!): ActionContext_!
  DeleteActionContextType(ID: String!, options___: DeleteOptionsInput!): ActionContextType_!
  DeleteActionExecutionLog(ID: String!, options___: DeleteOptionsInput!): ActionExecutionLog_!
  DeleteActionFilter(ID: String!, options___: DeleteOptionsInput!): ActionFilter_!
  DeleteActionLibrary(ID: String!, options___: DeleteOptionsInput!): ActionLibrary_!
  DeleteActionParam(ID: String!, options___: DeleteOptionsInput!): ActionParam_!
  DeleteActionResultCode(ID: String!, options___: DeleteOptionsInput!): ActionResultCode_!
  DeleteApplication(ID: String!, options___: DeleteOptionsInput!): Application_!
  DeleteApplicationEntity(ID: String!, options___: DeleteOptionsInput!): ApplicationEntity_!
  DeleteApplicationSetting(ID: String!, options___: DeleteOptionsInput!): ApplicationSetting_!
  DeleteCommunicationProviderMessageType(ID: String!, options___: DeleteOptionsInput!): CommunicationProviderMessageType_!
  DeleteCompany(ID: String!, options___: DeleteOptionsInput!): Company_!
  DeleteConversation(ID: String!, options___: DeleteOptionsInput!): Conversation_!
  DeleteConversationDetail(ID: String!, options___: DeleteOptionsInput!): ConversationDetail_!
  DeleteDashboard(ID: String!, options___: DeleteOptionsInput!): Dashboard_!
  DeleteDashboardCategory(ID: String!, options___: DeleteOptionsInput!): DashboardCategory_!
  DeleteDataContext(ID: String!, options___: DeleteOptionsInput!): DataContext_!
  DeleteDataContextItem(ID: String!, options___: DeleteOptionsInput!): DataContextItem_!
  DeleteEmployee(ID: String!, options___: DeleteOptionsInput!): Employee_!
  DeleteEntity(ID: String!, options___: DeleteOptionsInput!): Entity_!
  DeleteEntityAIAction(ID: String!, options___: DeleteOptionsInput!): EntityAIAction_!
  DeleteEntityAction(ID: String!, options___: DeleteOptionsInput!): EntityAction_!
  DeleteEntityActionFilter(ID: String!, options___: DeleteOptionsInput!): EntityActionFilter_!
  DeleteEntityActionInvocation(ID: String!, options___: DeleteOptionsInput!): EntityActionInvocation_!
  DeleteEntityActionInvocationType(ID: String!, options___: DeleteOptionsInput!): EntityActionInvocationType_!
  DeleteEntityActionParam(ID: String!, options___: DeleteOptionsInput!): EntityActionParam_!
  DeleteEntityField(ID: String!, options___: DeleteOptionsInput!): EntityField_!
  DeleteEntityPermission(ID: String!, options___: DeleteOptionsInput!): EntityPermission_!
  DeleteEntityRelationship(ID: String!, options___: DeleteOptionsInput!): EntityRelationship_!
  DeleteExplorerNavigationItem(ID: String!, options___: DeleteOptionsInput!): ExplorerNavigationItem_!
  DeleteFile(ID: String!, options___: DeleteOptionsInput!): File_!
  DeleteFileCategory(ID: String!, options___: DeleteOptionsInput!): FileCategory_!
  DeleteList(ID: String!, options___: DeleteOptionsInput!): List_!
  DeleteListDetail(ID: String!, options___: DeleteOptionsInput!): ListDetail_!
  DeleteQueryCategory(ID: String!, options___: DeleteOptionsInput!): QueryCategory_!
  DeleteReport(ID: String!, options___: DeleteOptionsInput!): Report_!
  DeleteReportCategory(ID: String!, options___: DeleteOptionsInput!): ReportCategory_!
  DeleteReportSnapshot(ID: String!, options___: DeleteOptionsInput!): ReportSnapshot_!
  DeleteRole(ID: String!, options___: DeleteOptionsInput!): Role_!
  DeleteScheduledAction(ID: String!, options___: DeleteOptionsInput!): ScheduledAction_!
  DeleteScheduledActionParam(ID: String!, options___: DeleteOptionsInput!): ScheduledActionParam_!
  DeleteUser(ID: String!, options___: DeleteOptionsInput!): User_!
  DeleteUserApplication(ID: String!, options___: DeleteOptionsInput!): UserApplication_!
  DeleteUserApplicationEntity(ID: String!, options___: DeleteOptionsInput!): UserApplicationEntity_!
  DeleteUserFavorite(ID: String!, options___: DeleteOptionsInput!): UserFavorite_!
  DeleteUserNotification(ID: String!, options___: DeleteOptionsInput!): UserNotification_!
  DeleteUserRole(ID: String!, options___: DeleteOptionsInput!): UserRole_!
  DeleteUserView(ID: String!, options___: DeleteOptionsInput!): UserView_!
  DeleteUserViewCategory(ID: String!, options___: DeleteOptionsInput!): UserViewCategory_!
  DeleteWorkspace(ID: String!, options___: DeleteOptionsInput!): Workspace_!
  DeleteWorkspaceItem(ID: String!, options___: DeleteOptionsInput!): WorkspaceItem_!
  Deleteflyway_schema_history(installed_rank: Int!, options___: DeleteOptionsInput!): flyway_schema_history_!
  MergeRecords(request: RecordMergeRequest!): RecordMergeResult!
  SetRecordFavoriteStatus(params: UserFavoriteSetParams!): UserFavoriteResult!
  UpdateAIAction(input: UpdateAIActionInput!): AIAction_!
  UpdateAIModel(input: UpdateAIModelInput!): AIModel_!
  UpdateAIModelAction(input: UpdateAIModelActionInput!): AIModelAction_!
  UpdateAIModelType(input: UpdateAIModelTypeInput!): AIModelType_!
  UpdateAction(input: UpdateActionInput!): Action_!
  UpdateActionAuthorization(input: UpdateActionAuthorizationInput!): ActionAuthorization_!
  UpdateActionCategory(input: UpdateActionCategoryInput!): ActionCategory_!
  UpdateActionContext(input: UpdateActionContextInput!): ActionContext_!
  UpdateActionContextType(input: UpdateActionContextTypeInput!): ActionContextType_!
  UpdateActionExecutionLog(input: UpdateActionExecutionLogInput!): ActionExecutionLog_!
  UpdateActionFilter(input: UpdateActionFilterInput!): ActionFilter_!
  UpdateActionLibrary(input: UpdateActionLibraryInput!): ActionLibrary_!
  UpdateActionParam(input: UpdateActionParamInput!): ActionParam_!
  UpdateActionResultCode(input: UpdateActionResultCodeInput!): ActionResultCode_!
  UpdateApplication(input: UpdateApplicationInput!): Application_!
  UpdateApplicationEntity(input: UpdateApplicationEntityInput!): ApplicationEntity_!
  UpdateApplicationSetting(input: UpdateApplicationSettingInput!): ApplicationSetting_!
  UpdateAuditLog(input: UpdateAuditLogInput!): AuditLog_!
  UpdateCommunicationBaseMessageType(input: UpdateCommunicationBaseMessageTypeInput!): CommunicationBaseMessageType_!
  UpdateCommunicationLog(input: UpdateCommunicationLogInput!): CommunicationLog_!
  UpdateCommunicationProvider(input: UpdateCommunicationProviderInput!): CommunicationProvider_!
  UpdateCommunicationProviderMessageType(input: UpdateCommunicationProviderMessageTypeInput!): CommunicationProviderMessageType_!
  UpdateCommunicationRun(input: UpdateCommunicationRunInput!): CommunicationRun_!
  UpdateCompany(input: UpdateCompanyInput!): Company_!
  UpdateCompanyIntegration(input: UpdateCompanyIntegrationInput!): CompanyIntegration_!
  UpdateCompanyIntegrationRecordMap(input: UpdateCompanyIntegrationRecordMapInput!): CompanyIntegrationRecordMap_!
  UpdateCompanyIntegrationRun(input: UpdateCompanyIntegrationRunInput!): CompanyIntegrationRun_!
  UpdateCompanyIntegrationRunAPILog(input: UpdateCompanyIntegrationRunAPILogInput!): CompanyIntegrationRunAPILog_!
  UpdateCompanyIntegrationRunDetail(input: UpdateCompanyIntegrationRunDetailInput!): CompanyIntegrationRunDetail_!
  UpdateConversation(input: UpdateConversationInput!): Conversation_!
  UpdateConversationDetail(input: UpdateConversationDetailInput!): ConversationDetail_!
  UpdateDashboard(input: UpdateDashboardInput!): Dashboard_!
  UpdateDashboardCategory(input: UpdateDashboardCategoryInput!): DashboardCategory_!
  UpdateDataContext(input: UpdateDataContextInput!): DataContext_!
  UpdateDataContextItem(input: UpdateDataContextItemInput!): DataContextItem_!
  UpdateDuplicateRun(input: UpdateDuplicateRunInput!): DuplicateRun_!
  UpdateDuplicateRunDetail(input: UpdateDuplicateRunDetailInput!): DuplicateRunDetail_!
  UpdateDuplicateRunDetailMatch(input: UpdateDuplicateRunDetailMatchInput!): DuplicateRunDetailMatch_!
  UpdateEmployee(input: UpdateEmployeeInput!): Employee_!
  UpdateEmployeeCompanyIntegration(input: UpdateEmployeeCompanyIntegrationInput!): EmployeeCompanyIntegration_!
  UpdateEmployeeRole(input: UpdateEmployeeRoleInput!): EmployeeRole_!
  UpdateEmployeeSkill(input: UpdateEmployeeSkillInput!): EmployeeSkill_!
  UpdateEntity(input: UpdateEntityInput!): Entity_!
  UpdateEntityAIAction(input: UpdateEntityAIActionInput!): EntityAIAction_!
  UpdateEntityAction(input: UpdateEntityActionInput!): EntityAction_!
  UpdateEntityActionFilter(input: UpdateEntityActionFilterInput!): EntityActionFilter_!
  UpdateEntityActionInvocation(input: UpdateEntityActionInvocationInput!): EntityActionInvocation_!
  UpdateEntityActionInvocationType(input: UpdateEntityActionInvocationTypeInput!): EntityActionInvocationType_!
  UpdateEntityActionParam(input: UpdateEntityActionParamInput!): EntityActionParam_!
  UpdateEntityCommunicationField(input: UpdateEntityCommunicationFieldInput!): EntityCommunicationField_!
  UpdateEntityCommunicationMessageType(input: UpdateEntityCommunicationMessageTypeInput!): EntityCommunicationMessageType_!
  UpdateEntityDocument(input: UpdateEntityDocumentInput!): EntityDocument_!
  UpdateEntityDocumentRun(input: UpdateEntityDocumentRunInput!): EntityDocumentRun_!
  UpdateEntityDocumentSetting(input: UpdateEntityDocumentSettingInput!): EntityDocumentSetting_!
  UpdateEntityDocumentType(input: UpdateEntityDocumentTypeInput!): EntityDocumentType_!
  UpdateEntityField(input: UpdateEntityFieldInput!): EntityField_!
  UpdateEntityFieldValue(input: UpdateEntityFieldValueInput!): EntityFieldValue_!
  UpdateEntityPermission(input: UpdateEntityPermissionInput!): EntityPermission_!
  UpdateEntityRecordDocument(input: UpdateEntityRecordDocumentInput!): EntityRecordDocument_!
  UpdateEntityRelationship(input: UpdateEntityRelationshipInput!): EntityRelationship_!
  UpdateEntityRelationshipDisplayComponent(input: UpdateEntityRelationshipDisplayComponentInput!): EntityRelationshipDisplayComponent_!
  UpdateEntitySetting(input: UpdateEntitySettingInput!): EntitySetting_!
  UpdateErrorLog(input: UpdateErrorLogInput!): ErrorLog_!
  UpdateExplorerNavigationItem(input: UpdateExplorerNavigationItemInput!): ExplorerNavigationItem_!
  UpdateFile(input: UpdateFileInput!): File_!
  UpdateFileCategory(input: UpdateFileCategoryInput!): FileCategory_!
  UpdateFileEntityRecordLink(input: UpdateFileEntityRecordLinkInput!): FileEntityRecordLink_!
  UpdateFileStorageProvider(input: UpdateFileStorageProviderInput!): FileStorageProvider_!
  UpdateIntegration(input: UpdateIntegrationInput!): Integration_!
  UpdateIntegrationURLFormat(input: UpdateIntegrationURLFormatInput!): IntegrationURLFormat_!
  UpdateLibrary(input: UpdateLibraryInput!): Library_!
  UpdateLibraryItem(input: UpdateLibraryItemInput!): LibraryItem_!
  UpdateList(input: UpdateListInput!): List_!
  UpdateListCategory(input: UpdateListCategoryInput!): ListCategory_!
  UpdateListDetail(input: UpdateListDetailInput!): ListDetail_!
  UpdateQuery(input: UpdateQueryInput!): Query_!
  UpdateQueryCategory(input: UpdateQueryCategoryInput!): QueryCategory_!
  UpdateQueryField(input: UpdateQueryFieldInput!): QueryField_!
  UpdateQueryPermission(input: UpdateQueryPermissionInput!): QueryPermission_!
  UpdateQueue(input: UpdateQueueInput!): Queue_!
  UpdateQueueTask(input: UpdateQueueTaskInput!): QueueTask_!
  UpdateRecommendation(input: UpdateRecommendationInput!): Recommendation_!
  UpdateRecommendationItem(input: UpdateRecommendationItemInput!): RecommendationItem_!
  UpdateRecommendationProvider(input: UpdateRecommendationProviderInput!): RecommendationProvider_!
  UpdateRecommendationRun(input: UpdateRecommendationRunInput!): RecommendationRun_!
  UpdateRecordChange(input: UpdateRecordChangeInput!): RecordChange_!
  UpdateRecordChangeReplayRun(input: UpdateRecordChangeReplayRunInput!): RecordChangeReplayRun_!
  UpdateRecordMergeDeletionLog(input: UpdateRecordMergeDeletionLogInput!): RecordMergeDeletionLog_!
  UpdateRecordMergeLog(input: UpdateRecordMergeLogInput!): RecordMergeLog_!
  UpdateReport(input: UpdateReportInput!): Report_!
  UpdateReportCategory(input: UpdateReportCategoryInput!): ReportCategory_!
  UpdateReportSnapshot(input: UpdateReportSnapshotInput!): ReportSnapshot_!
  UpdateRole(input: UpdateRoleInput!): Role_!
  UpdateScheduledAction(input: UpdateScheduledActionInput!): ScheduledAction_!
  UpdateScheduledActionParam(input: UpdateScheduledActionParamInput!): ScheduledActionParam_!
  UpdateSchemaInfo(input: UpdateSchemaInfoInput!): SchemaInfo_!
  UpdateTemplate(input: UpdateTemplateInput!): Template_!
  UpdateTemplateCategory(input: UpdateTemplateCategoryInput!): TemplateCategory_!
  UpdateTemplateContent(input: UpdateTemplateContentInput!): TemplateContent_!
  UpdateTemplateContentType(input: UpdateTemplateContentTypeInput!): TemplateContentType_!
  UpdateTemplateParam(input: UpdateTemplateParamInput!): TemplateParam_!
  UpdateUser(input: UpdateUserInput!): User_!
  UpdateUserApplication(input: UpdateUserApplicationInput!): UserApplication_!
  UpdateUserApplicationEntity(input: UpdateUserApplicationEntityInput!): UserApplicationEntity_!
  UpdateUserFavorite(input: UpdateUserFavoriteInput!): UserFavorite_!
  UpdateUserNotification(input: UpdateUserNotificationInput!): UserNotification_!
  UpdateUserRecordLog(input: UpdateUserRecordLogInput!): UserRecordLog_!
  UpdateUserView(input: UpdateUserViewInput!): UserView_!
  UpdateUserViewCategory(input: UpdateUserViewCategoryInput!): UserViewCategory_!
  UpdateUserViewRun(input: UpdateUserViewRunInput!): UserViewRun_!
  UpdateUserViewRunDetail(input: UpdateUserViewRunDetailInput!): UserViewRunDetail_!
  UpdateVectorDatabase(input: UpdateVectorDatabaseInput!): VectorDatabase_!
  UpdateVectorIndex(input: UpdateVectorIndexInput!): VectorIndex_!
  UpdateVersionInstallation(input: UpdateVersionInstallationInput!): VersionInstallation_!
  UpdateWorkflow(input: UpdateWorkflowInput!): Workflow_!
  UpdateWorkflowEngine(input: UpdateWorkflowEngineInput!): WorkflowEngine_!
  UpdateWorkflowRun(input: UpdateWorkflowRunInput!): WorkflowRun_!
  UpdateWorkspace(input: UpdateWorkspaceInput!): Workspace_!
  UpdateWorkspaceItem(input: UpdateWorkspaceItemInput!): WorkspaceItem_!
  Updateflyway_schema_history(input: Updateflyway_schema_historyInput!): flyway_schema_history_!
}

type OutputDeliveryType_ {
  Description: String
  ID: String!
  Name: String!
  ReportsArray: [Report_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type OutputFormatType_ {
  Description: String
  DisplayFormat: String
  ID: String!
  Name: String!
  ReportsArray: [Report_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type OutputTriggerType_ {
  Description: String
  ID: String!
  Name: String!
  ReportsArray: [Report_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input PotentialDuplicateRequestType {
  EntityDocumentID: String
  EntityID: String!
  ListID: String!
  ProbabilityScore: Int
  RecordIDs: [CompositeKeyInputType!]!
}

type PotentialDuplicateResponseType {
  ErrorMessage: String
  PotentialDuplicateResult: [PotentialDuplicateResultType!]!
  Status: String!
}

type PotentialDuplicateResultType {
  DuplicateRunDetailMatchRecordIDs: [String!]!
  Duplicates: [PotentialDuplicateType!]!
  EntityID: String
  RecordPrimaryKeys: CompositeKeyOutputType!
}

type PotentialDuplicateType {
  KeyValuePairs: [KeyValuePairOutputType!]!
  ProbabilityScore: Float!
}

type PushStatusNotification {
  date: Timestamp!
  message: String
  sessionId: ID!
}

type Query {
  AIAction(ID: String!): AIAction_
  AIModel(ID: String!): AIModel_
  AIModelAction(ID: String!): AIModelAction_
  AIModelType(ID: String!): AIModelType_
  Action(ID: String!): Action_
  ActionAuthorization(ID: String!): ActionAuthorization_
  ActionCategory(ID: String!): ActionCategory_
  ActionContext(ID: String!): ActionContext_
  ActionContextType(ID: String!): ActionContextType_
  ActionExecutionLog(ID: String!): ActionExecutionLog_
  ActionFilter(ID: String!): ActionFilter_
  ActionLibrary(ID: String!): ActionLibrary_
  ActionParam(ID: String!): ActionParam_
  ActionResultCode(ID: String!): ActionResultCode_
  AllAIActions: [AIAction_!]!
  AllAIModelActions: [AIModelAction_!]!
  AllAIModelTypes: [AIModelType_!]!
  AllAIModels: [AIModel_!]!
  AllApplications: [Application_!]!
  AllAuditLogTypes: [AuditLogType_!]!
  AllAuthorizationRoles: [AuthorizationRole_!]!
  AllAuthorizations: [Authorization_!]!
  AllCompanies: [Company_!]!
  AllEmployees: [Employee_!]!
  AllEntities: [Entity_!]!
  AllEntityAIActions: [EntityAIAction_!]!
  AllEntityFieldValues: [EntityFieldValue_!]!
  AllEntityFields: [EntityField_!]!
  AllEntityPermissions: [EntityPermission_!]!
  AllEntityRelationships: [EntityRelationship_!]!
  AllIntegrationURLFormats: [IntegrationURLFormat_!]!
  AllIntegrations: [Integration_!]!
  AllRoles: [Role_!]!
  AllRowLevelSecurityFilters: [RowLevelSecurityFilter_!]!
  AllSkills: [Skill_!]!
  AllUserRoles: [UserRole_!]!
  AllUserViews: [UserView_!]!
  AllUsers: [User_!]!
  Application(ID: String!): Application_
  ApplicationEntity(ID: String!): ApplicationEntity_
  ApplicationSetting(ID: String!): ApplicationSetting_
  AuditLog(ID: String!): AuditLog_
  AuditLogType(ID: String!): AuditLogType_
  Authorization(ID: String!): Authorization_
  AuthorizationRole(ID: String!): AuthorizationRole_
  CommunicationBaseMessageType(ID: String!): CommunicationBaseMessageType_
  CommunicationLog(ID: String!): CommunicationLog_
  CommunicationProvider(ID: String!): CommunicationProvider_
  CommunicationProviderMessageType(ID: String!): CommunicationProviderMessageType_
  CommunicationRun(ID: String!): CommunicationRun_
  Company(ID: String!): Company_
  CompanyIntegration(ID: String!): CompanyIntegration_
  CompanyIntegrationRecordMap(ID: String!): CompanyIntegrationRecordMap_
  CompanyIntegrationRun(ID: String!): CompanyIntegrationRun_
  CompanyIntegrationRunAPILog(ID: String!): CompanyIntegrationRunAPILog_
  CompanyIntegrationRunDetail(ID: String!): CompanyIntegrationRunDetail_
  Conversation(ID: String!): Conversation_
  ConversationDetail(ID: String!): ConversationDetail_
  CurrentUser: User_!
  CurrentUserDefaultViewByEntityID(EntityID: Int!): [UserView_!]!
  CurrentUserUserViewsByEntityID(EntityID: Int!): [UserView_!]!
  Dashboard(ID: String!): Dashboard_
  DashboardCategory(ID: String!): DashboardCategory_
  DataContext(ID: String!): DataContext_
  DataContextItem(ID: String!): DataContextItem_
  Dataset(ID: String!): Dataset_
  DatasetItem(ID: String!): DatasetItem_
  DefaultViewByUserAndEntity(EntityID: Int!, UserID: Int!): [UserView_!]!
  DuplicateRun(ID: String!): DuplicateRun_
  DuplicateRunDetail(ID: String!): DuplicateRunDetail_
  DuplicateRunDetailMatch(ID: String!): DuplicateRunDetailMatch_
  Employee(ID: String!): Employee_
  EmployeeCompanyIntegration(ID: String!): EmployeeCompanyIntegration_
  EmployeeRole(ID: String!): EmployeeRole_
  EmployeeSkill(ID: String!): EmployeeSkill_
  EntitiesBySchemas(ExcludeSchemas: [String!], IncludeSchemas: [String!]): [Entity_!]!
  Entity(ID: String!): Entity_
  EntityAIAction(ID: String!): EntityAIAction_
  EntityAction(ID: String!): EntityAction_
  EntityActionFilter(ID: String!): EntityActionFilter_
  EntityActionInvocation(ID: String!): EntityActionInvocation_
  EntityActionInvocationType(ID: String!): EntityActionInvocationType_
  EntityActionParam(ID: String!): EntityActionParam_
  EntityCommunicationField(ID: String!): EntityCommunicationField_
  EntityCommunicationMessageType(ID: String!): EntityCommunicationMessageType_
  EntityDocument(ID: String!): EntityDocument_
  EntityDocumentRun(ID: String!): EntityDocumentRun_
  EntityDocumentSetting(ID: String!): EntityDocumentSetting_
  EntityDocumentType(ID: String!): EntityDocumentType_
  EntityField(ID: String!): EntityField_
  EntityFieldValue(ID: String!): EntityFieldValue_
  EntityPermission(ID: String!): EntityPermission_
  EntityRecordDocument(ID: String!): EntityRecordDocument_
  EntityRelationship(ID: String!): EntityRelationship_
  EntityRelationshipDisplayComponent(ID: String!): EntityRelationshipDisplayComponent_
  EntitySetting(ID: String!): EntitySetting_
  ErrorLog(ID: String!): ErrorLog_
  ExecuteAskSkipAnalysisQuery(ConversationId: String!, DataContextId: String, UserQuestion: String!): AskSkipResultType!
  ExecuteAskSkipRecordChat(CompositeKey: CompositeKeyInputType!, ConversationId: String!, EntityName: String!, UserQuestion: String!): AskSkipResultType!
  ExecuteAskSkipRunScript(DataContextId: String!, ScriptText: String!): AskSkipResultType!
  ExplorerNavigationItem(ID: String!): ExplorerNavigationItem_
  File(ID: String!): File_
  FileCategory(ID: String!): FileCategory_
  FileEntityRecordLink(ID: String!): FileEntityRecordLink_
  FileStorageProvider(ID: String!): FileStorageProvider_
  GetDatasetByName(DatasetName: String!, ItemFilters: [DatasetItemFilterTypeGQL]): DatasetResultType!
  GetDatasetStatusByName(DatasetName: String!, ItemFilters: [DatasetItemFilterTypeGQL]): DatasetStatusResultType!
  GetEntityDependencies(entityName: String!): [EntityDependencyResult!]!
  GetEntityRecordName(CompositeKey: CompositeKeyInputType!, EntityName: String!): EntityRecordNameResult!
  GetEntityRecordNames(info: [EntityRecordNameInput!]!): [EntityRecordNameResult!]!
  GetQueryData(QueryID: String!): RunQueryResultType!
  GetRecordDependencies(CompositeKey: CompositeKeyInputType!, entityName: String!): [RecordDependencyResult!]!
  GetRecordDuplicates(params: PotentialDuplicateRequestType!): PotentialDuplicateResponseType!
  GetRecordFavoriteStatus(params: UserFavoriteSearchParams!): UserFavoriteResult!
  GetReportData(ReportID: String!): RunReportResultType!
  Integration(ID: String!): Integration_
  IntegrationURLFormat(ID: String!): IntegrationURLFormat_
  Library(ID: String!): Library_
  LibraryItem(ID: String!): LibraryItem_
  List(ID: String!): List_
  ListCategory(ID: String!): ListCategory_
  ListDetail(ID: String!): ListDetail_
  OutputDeliveryType(ID: String!): OutputDeliveryType_
  OutputFormatType(ID: String!): OutputFormatType_
  OutputTriggerType(ID: String!): OutputTriggerType_
  Query(ID: String!): Query_
  QueryCategory(ID: String!): QueryCategory_
  QueryField(ID: String!): QueryField_
  QueryPermission(ID: String!): QueryPermission_
  Queue(ID: String!): Queue_
  QueueTask(ID: String!): QueueTask_
  QueueType(ID: String!): QueueType_
  Recommendation(ID: String!): Recommendation_
  RecommendationItem(ID: String!): RecommendationItem_
  RecommendationProvider(ID: String!): RecommendationProvider_
  RecommendationRun(ID: String!): RecommendationRun_
  RecordChange(ID: String!): RecordChange_
  RecordChangeReplayRun(ID: String!): RecordChangeReplayRun_
  RecordMergeDeletionLog(ID: String!): RecordMergeDeletionLog_
  RecordMergeLog(ID: String!): RecordMergeLog_
  Report(ID: String!): Report_
  ReportCategory(ID: String!): ReportCategory_
  ReportSnapshot(ID: String!): ReportSnapshot_
  ResourceType(ID: String!): ResourceType_
  Role(ID: String!): Role_
  RowLevelSecurityFilter(ID: String!): RowLevelSecurityFilter_
  RunAIActionDynamicView(input: RunDynamicViewInput!): RunAIActionViewResult!
  RunAIActionViewByID(input: RunViewByIDInput!): RunAIActionViewResult!
  RunAIActionViewByName(input: RunViewByNameInput!): RunAIActionViewResult!
  RunAIModelActionDynamicView(input: RunDynamicViewInput!): RunAIModelActionViewResult!
  RunAIModelActionViewByID(input: RunViewByIDInput!): RunAIModelActionViewResult!
  RunAIModelActionViewByName(input: RunViewByNameInput!): RunAIModelActionViewResult!
  RunAIModelDynamicView(input: RunDynamicViewInput!): RunAIModelViewResult!
  RunAIModelTypeDynamicView(input: RunDynamicViewInput!): RunAIModelTypeViewResult!
  RunAIModelTypeViewByID(input: RunViewByIDInput!): RunAIModelTypeViewResult!
  RunAIModelTypeViewByName(input: RunViewByNameInput!): RunAIModelTypeViewResult!
  RunAIModelViewByID(input: RunViewByIDInput!): RunAIModelViewResult!
  RunAIModelViewByName(input: RunViewByNameInput!): RunAIModelViewResult!
  RunActionAuthorizationDynamicView(input: RunDynamicViewInput!): RunActionAuthorizationViewResult!
  RunActionAuthorizationViewByID(input: RunViewByIDInput!): RunActionAuthorizationViewResult!
  RunActionAuthorizationViewByName(input: RunViewByNameInput!): RunActionAuthorizationViewResult!
  RunActionCategoryDynamicView(input: RunDynamicViewInput!): RunActionCategoryViewResult!
  RunActionCategoryViewByID(input: RunViewByIDInput!): RunActionCategoryViewResult!
  RunActionCategoryViewByName(input: RunViewByNameInput!): RunActionCategoryViewResult!
  RunActionContextDynamicView(input: RunDynamicViewInput!): RunActionContextViewResult!
  RunActionContextTypeDynamicView(input: RunDynamicViewInput!): RunActionContextTypeViewResult!
  RunActionContextTypeViewByID(input: RunViewByIDInput!): RunActionContextTypeViewResult!
  RunActionContextTypeViewByName(input: RunViewByNameInput!): RunActionContextTypeViewResult!
  RunActionContextViewByID(input: RunViewByIDInput!): RunActionContextViewResult!
  RunActionContextViewByName(input: RunViewByNameInput!): RunActionContextViewResult!
  RunActionDynamicView(input: RunDynamicViewInput!): RunActionViewResult!
  RunActionExecutionLogDynamicView(input: RunDynamicViewInput!): RunActionExecutionLogViewResult!
  RunActionExecutionLogViewByID(input: RunViewByIDInput!): RunActionExecutionLogViewResult!
  RunActionExecutionLogViewByName(input: RunViewByNameInput!): RunActionExecutionLogViewResult!
  RunActionFilterDynamicView(input: RunDynamicViewInput!): RunActionFilterViewResult!
  RunActionFilterViewByID(input: RunViewByIDInput!): RunActionFilterViewResult!
  RunActionFilterViewByName(input: RunViewByNameInput!): RunActionFilterViewResult!
  RunActionLibraryDynamicView(input: RunDynamicViewInput!): RunActionLibraryViewResult!
  RunActionLibraryViewByID(input: RunViewByIDInput!): RunActionLibraryViewResult!
  RunActionLibraryViewByName(input: RunViewByNameInput!): RunActionLibraryViewResult!
  RunActionParamDynamicView(input: RunDynamicViewInput!): RunActionParamViewResult!
  RunActionParamViewByID(input: RunViewByIDInput!): RunActionParamViewResult!
  RunActionParamViewByName(input: RunViewByNameInput!): RunActionParamViewResult!
  RunActionResultCodeDynamicView(input: RunDynamicViewInput!): RunActionResultCodeViewResult!
  RunActionResultCodeViewByID(input: RunViewByIDInput!): RunActionResultCodeViewResult!
  RunActionResultCodeViewByName(input: RunViewByNameInput!): RunActionResultCodeViewResult!
  RunActionViewByID(input: RunViewByIDInput!): RunActionViewResult!
  RunActionViewByName(input: RunViewByNameInput!): RunActionViewResult!
  RunApplicationDynamicView(input: RunDynamicViewInput!): RunApplicationViewResult!
  RunApplicationEntityDynamicView(input: RunDynamicViewInput!): RunApplicationEntityViewResult!
  RunApplicationEntityViewByID(input: RunViewByIDInput!): RunApplicationEntityViewResult!
  RunApplicationEntityViewByName(input: RunViewByNameInput!): RunApplicationEntityViewResult!
  RunApplicationSettingDynamicView(input: RunDynamicViewInput!): RunApplicationSettingViewResult!
  RunApplicationSettingViewByID(input: RunViewByIDInput!): RunApplicationSettingViewResult!
  RunApplicationSettingViewByName(input: RunViewByNameInput!): RunApplicationSettingViewResult!
  RunApplicationViewByID(input: RunViewByIDInput!): RunApplicationViewResult!
  RunApplicationViewByName(input: RunViewByNameInput!): RunApplicationViewResult!
  RunAuditLogDynamicView(input: RunDynamicViewInput!): RunAuditLogViewResult!
  RunAuditLogTypeDynamicView(input: RunDynamicViewInput!): RunAuditLogTypeViewResult!
  RunAuditLogTypeViewByID(input: RunViewByIDInput!): RunAuditLogTypeViewResult!
  RunAuditLogTypeViewByName(input: RunViewByNameInput!): RunAuditLogTypeViewResult!
  RunAuditLogViewByID(input: RunViewByIDInput!): RunAuditLogViewResult!
  RunAuditLogViewByName(input: RunViewByNameInput!): RunAuditLogViewResult!
  RunAuthorizationDynamicView(input: RunDynamicViewInput!): RunAuthorizationViewResult!
  RunAuthorizationRoleDynamicView(input: RunDynamicViewInput!): RunAuthorizationRoleViewResult!
  RunAuthorizationRoleViewByID(input: RunViewByIDInput!): RunAuthorizationRoleViewResult!
  RunAuthorizationRoleViewByName(input: RunViewByNameInput!): RunAuthorizationRoleViewResult!
  RunAuthorizationViewByID(input: RunViewByIDInput!): RunAuthorizationViewResult!
  RunAuthorizationViewByName(input: RunViewByNameInput!): RunAuthorizationViewResult!
  RunCommunicationBaseMessageTypeDynamicView(input: RunDynamicViewInput!): RunCommunicationBaseMessageTypeViewResult!
  RunCommunicationBaseMessageTypeViewByID(input: RunViewByIDInput!): RunCommunicationBaseMessageTypeViewResult!
  RunCommunicationBaseMessageTypeViewByName(input: RunViewByNameInput!): RunCommunicationBaseMessageTypeViewResult!
  RunCommunicationLogDynamicView(input: RunDynamicViewInput!): RunCommunicationLogViewResult!
  RunCommunicationLogViewByID(input: RunViewByIDInput!): RunCommunicationLogViewResult!
  RunCommunicationLogViewByName(input: RunViewByNameInput!): RunCommunicationLogViewResult!
  RunCommunicationProviderDynamicView(input: RunDynamicViewInput!): RunCommunicationProviderViewResult!
  RunCommunicationProviderMessageTypeDynamicView(input: RunDynamicViewInput!): RunCommunicationProviderMessageTypeViewResult!
  RunCommunicationProviderMessageTypeViewByID(input: RunViewByIDInput!): RunCommunicationProviderMessageTypeViewResult!
  RunCommunicationProviderMessageTypeViewByName(input: RunViewByNameInput!): RunCommunicationProviderMessageTypeViewResult!
  RunCommunicationProviderViewByID(input: RunViewByIDInput!): RunCommunicationProviderViewResult!
  RunCommunicationProviderViewByName(input: RunViewByNameInput!): RunCommunicationProviderViewResult!
  RunCommunicationRunDynamicView(input: RunDynamicViewInput!): RunCommunicationRunViewResult!
  RunCommunicationRunViewByID(input: RunViewByIDInput!): RunCommunicationRunViewResult!
  RunCommunicationRunViewByName(input: RunViewByNameInput!): RunCommunicationRunViewResult!
  RunCompanyDynamicView(input: RunDynamicViewInput!): RunCompanyViewResult!
  RunCompanyIntegrationDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationViewResult!
  RunCompanyIntegrationRecordMapDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationRecordMapViewResult!
  RunCompanyIntegrationRecordMapViewByID(input: RunViewByIDInput!): RunCompanyIntegrationRecordMapViewResult!
  RunCompanyIntegrationRecordMapViewByName(input: RunViewByNameInput!): RunCompanyIntegrationRecordMapViewResult!
  RunCompanyIntegrationRunAPILogDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationRunAPILogViewResult!
  RunCompanyIntegrationRunAPILogViewByID(input: RunViewByIDInput!): RunCompanyIntegrationRunAPILogViewResult!
  RunCompanyIntegrationRunAPILogViewByName(input: RunViewByNameInput!): RunCompanyIntegrationRunAPILogViewResult!
  RunCompanyIntegrationRunDetailDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationRunDetailViewResult!
  RunCompanyIntegrationRunDetailViewByID(input: RunViewByIDInput!): RunCompanyIntegrationRunDetailViewResult!
  RunCompanyIntegrationRunDetailViewByName(input: RunViewByNameInput!): RunCompanyIntegrationRunDetailViewResult!
  RunCompanyIntegrationRunDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationRunViewResult!
  RunCompanyIntegrationRunViewByID(input: RunViewByIDInput!): RunCompanyIntegrationRunViewResult!
  RunCompanyIntegrationRunViewByName(input: RunViewByNameInput!): RunCompanyIntegrationRunViewResult!
  RunCompanyIntegrationViewByID(input: RunViewByIDInput!): RunCompanyIntegrationViewResult!
  RunCompanyIntegrationViewByName(input: RunViewByNameInput!): RunCompanyIntegrationViewResult!
  RunCompanyViewByID(input: RunViewByIDInput!): RunCompanyViewResult!
  RunCompanyViewByName(input: RunViewByNameInput!): RunCompanyViewResult!
  RunConversationDetailDynamicView(input: RunDynamicViewInput!): RunConversationDetailViewResult!
  RunConversationDetailViewByID(input: RunViewByIDInput!): RunConversationDetailViewResult!
  RunConversationDetailViewByName(input: RunViewByNameInput!): RunConversationDetailViewResult!
  RunConversationDynamicView(input: RunDynamicViewInput!): RunConversationViewResult!
  RunConversationViewByID(input: RunViewByIDInput!): RunConversationViewResult!
  RunConversationViewByName(input: RunViewByNameInput!): RunConversationViewResult!
  RunDashboardCategoryDynamicView(input: RunDynamicViewInput!): RunDashboardCategoryViewResult!
  RunDashboardCategoryViewByID(input: RunViewByIDInput!): RunDashboardCategoryViewResult!
  RunDashboardCategoryViewByName(input: RunViewByNameInput!): RunDashboardCategoryViewResult!
  RunDashboardDynamicView(input: RunDynamicViewInput!): RunDashboardViewResult!
  RunDashboardViewByID(input: RunViewByIDInput!): RunDashboardViewResult!
  RunDashboardViewByName(input: RunViewByNameInput!): RunDashboardViewResult!
  RunDataContextDynamicView(input: RunDynamicViewInput!): RunDataContextViewResult!
  RunDataContextItemDynamicView(input: RunDynamicViewInput!): RunDataContextItemViewResult!
  RunDataContextItemViewByID(input: RunViewByIDInput!): RunDataContextItemViewResult!
  RunDataContextItemViewByName(input: RunViewByNameInput!): RunDataContextItemViewResult!
  RunDataContextViewByID(input: RunViewByIDInput!): RunDataContextViewResult!
  RunDataContextViewByName(input: RunViewByNameInput!): RunDataContextViewResult!
  RunDatasetDynamicView(input: RunDynamicViewInput!): RunDatasetViewResult!
  RunDatasetItemDynamicView(input: RunDynamicViewInput!): RunDatasetItemViewResult!
  RunDatasetItemViewByID(input: RunViewByIDInput!): RunDatasetItemViewResult!
  RunDatasetItemViewByName(input: RunViewByNameInput!): RunDatasetItemViewResult!
  RunDatasetViewByID(input: RunViewByIDInput!): RunDatasetViewResult!
  RunDatasetViewByName(input: RunViewByNameInput!): RunDatasetViewResult!
  RunDuplicateRunDetailDynamicView(input: RunDynamicViewInput!): RunDuplicateRunDetailViewResult!
  RunDuplicateRunDetailMatchDynamicView(input: RunDynamicViewInput!): RunDuplicateRunDetailMatchViewResult!
  RunDuplicateRunDetailMatchViewByID(input: RunViewByIDInput!): RunDuplicateRunDetailMatchViewResult!
  RunDuplicateRunDetailMatchViewByName(input: RunViewByNameInput!): RunDuplicateRunDetailMatchViewResult!
  RunDuplicateRunDetailViewByID(input: RunViewByIDInput!): RunDuplicateRunDetailViewResult!
  RunDuplicateRunDetailViewByName(input: RunViewByNameInput!): RunDuplicateRunDetailViewResult!
  RunDuplicateRunDynamicView(input: RunDynamicViewInput!): RunDuplicateRunViewResult!
  RunDuplicateRunViewByID(input: RunViewByIDInput!): RunDuplicateRunViewResult!
  RunDuplicateRunViewByName(input: RunViewByNameInput!): RunDuplicateRunViewResult!
  RunDynamicView(input: RunDynamicViewInput!): RunViewResult!
  RunEmployeeCompanyIntegrationDynamicView(input: RunDynamicViewInput!): RunEmployeeCompanyIntegrationViewResult!
  RunEmployeeCompanyIntegrationViewByID(input: RunViewByIDInput!): RunEmployeeCompanyIntegrationViewResult!
  RunEmployeeCompanyIntegrationViewByName(input: RunViewByNameInput!): RunEmployeeCompanyIntegrationViewResult!
  RunEmployeeDynamicView(input: RunDynamicViewInput!): RunEmployeeViewResult!
  RunEmployeeRoleDynamicView(input: RunDynamicViewInput!): RunEmployeeRoleViewResult!
  RunEmployeeRoleViewByID(input: RunViewByIDInput!): RunEmployeeRoleViewResult!
  RunEmployeeRoleViewByName(input: RunViewByNameInput!): RunEmployeeRoleViewResult!
  RunEmployeeSkillDynamicView(input: RunDynamicViewInput!): RunEmployeeSkillViewResult!
  RunEmployeeSkillViewByID(input: RunViewByIDInput!): RunEmployeeSkillViewResult!
  RunEmployeeSkillViewByName(input: RunViewByNameInput!): RunEmployeeSkillViewResult!
  RunEmployeeViewByID(input: RunViewByIDInput!): RunEmployeeViewResult!
  RunEmployeeViewByName(input: RunViewByNameInput!): RunEmployeeViewResult!
  RunEntityAIActionDynamicView(input: RunDynamicViewInput!): RunEntityAIActionViewResult!
  RunEntityAIActionViewByID(input: RunViewByIDInput!): RunEntityAIActionViewResult!
  RunEntityAIActionViewByName(input: RunViewByNameInput!): RunEntityAIActionViewResult!
  RunEntityActionDynamicView(input: RunDynamicViewInput!): RunEntityActionViewResult!
  RunEntityActionFilterDynamicView(input: RunDynamicViewInput!): RunEntityActionFilterViewResult!
  RunEntityActionFilterViewByID(input: RunViewByIDInput!): RunEntityActionFilterViewResult!
  RunEntityActionFilterViewByName(input: RunViewByNameInput!): RunEntityActionFilterViewResult!
  RunEntityActionInvocationDynamicView(input: RunDynamicViewInput!): RunEntityActionInvocationViewResult!
  RunEntityActionInvocationTypeDynamicView(input: RunDynamicViewInput!): RunEntityActionInvocationTypeViewResult!
  RunEntityActionInvocationTypeViewByID(input: RunViewByIDInput!): RunEntityActionInvocationTypeViewResult!
  RunEntityActionInvocationTypeViewByName(input: RunViewByNameInput!): RunEntityActionInvocationTypeViewResult!
  RunEntityActionInvocationViewByID(input: RunViewByIDInput!): RunEntityActionInvocationViewResult!
  RunEntityActionInvocationViewByName(input: RunViewByNameInput!): RunEntityActionInvocationViewResult!
  RunEntityActionParamDynamicView(input: RunDynamicViewInput!): RunEntityActionParamViewResult!
  RunEntityActionParamViewByID(input: RunViewByIDInput!): RunEntityActionParamViewResult!
  RunEntityActionParamViewByName(input: RunViewByNameInput!): RunEntityActionParamViewResult!
  RunEntityActionViewByID(input: RunViewByIDInput!): RunEntityActionViewResult!
  RunEntityActionViewByName(input: RunViewByNameInput!): RunEntityActionViewResult!
  RunEntityCommunicationByViewID(entityID: String!, includeProcessedMessages: Boolean!, message: CommunicationMessageInput!, previewOnly: Boolean!, providerMessageTypeName: String!, providerName: String!, runViewByIDInput: RunViewByIDInput!): RunEntityCommunicationResultType!
  RunEntityCommunicationFieldDynamicView(input: RunDynamicViewInput!): RunEntityCommunicationFieldViewResult!
  RunEntityCommunicationFieldViewByID(input: RunViewByIDInput!): RunEntityCommunicationFieldViewResult!
  RunEntityCommunicationFieldViewByName(input: RunViewByNameInput!): RunEntityCommunicationFieldViewResult!
  RunEntityCommunicationMessageTypeDynamicView(input: RunDynamicViewInput!): RunEntityCommunicationMessageTypeViewResult!
  RunEntityCommunicationMessageTypeViewByID(input: RunViewByIDInput!): RunEntityCommunicationMessageTypeViewResult!
  RunEntityCommunicationMessageTypeViewByName(input: RunViewByNameInput!): RunEntityCommunicationMessageTypeViewResult!
  RunEntityDocumentDynamicView(input: RunDynamicViewInput!): RunEntityDocumentViewResult!
  RunEntityDocumentRunDynamicView(input: RunDynamicViewInput!): RunEntityDocumentRunViewResult!
  RunEntityDocumentRunViewByID(input: RunViewByIDInput!): RunEntityDocumentRunViewResult!
  RunEntityDocumentRunViewByName(input: RunViewByNameInput!): RunEntityDocumentRunViewResult!
  RunEntityDocumentSettingDynamicView(input: RunDynamicViewInput!): RunEntityDocumentSettingViewResult!
  RunEntityDocumentSettingViewByID(input: RunViewByIDInput!): RunEntityDocumentSettingViewResult!
  RunEntityDocumentSettingViewByName(input: RunViewByNameInput!): RunEntityDocumentSettingViewResult!
  RunEntityDocumentTypeDynamicView(input: RunDynamicViewInput!): RunEntityDocumentTypeViewResult!
  RunEntityDocumentTypeViewByID(input: RunViewByIDInput!): RunEntityDocumentTypeViewResult!
  RunEntityDocumentTypeViewByName(input: RunViewByNameInput!): RunEntityDocumentTypeViewResult!
  RunEntityDocumentViewByID(input: RunViewByIDInput!): RunEntityDocumentViewResult!
  RunEntityDocumentViewByName(input: RunViewByNameInput!): RunEntityDocumentViewResult!
  RunEntityDynamicView(input: RunDynamicViewInput!): RunEntityViewResult!
  RunEntityFieldDynamicView(input: RunDynamicViewInput!): RunEntityFieldViewResult!
  RunEntityFieldValueDynamicView(input: RunDynamicViewInput!): RunEntityFieldValueViewResult!
  RunEntityFieldValueViewByID(input: RunViewByIDInput!): RunEntityFieldValueViewResult!
  RunEntityFieldValueViewByName(input: RunViewByNameInput!): RunEntityFieldValueViewResult!
  RunEntityFieldViewByID(input: RunViewByIDInput!): RunEntityFieldViewResult!
  RunEntityFieldViewByName(input: RunViewByNameInput!): RunEntityFieldViewResult!
  RunEntityPermissionDynamicView(input: RunDynamicViewInput!): RunEntityPermissionViewResult!
  RunEntityPermissionViewByID(input: RunViewByIDInput!): RunEntityPermissionViewResult!
  RunEntityPermissionViewByName(input: RunViewByNameInput!): RunEntityPermissionViewResult!
  RunEntityRecordDocumentDynamicView(input: RunDynamicViewInput!): RunEntityRecordDocumentViewResult!
  RunEntityRecordDocumentViewByID(input: RunViewByIDInput!): RunEntityRecordDocumentViewResult!
  RunEntityRecordDocumentViewByName(input: RunViewByNameInput!): RunEntityRecordDocumentViewResult!
  RunEntityRelationshipDisplayComponentDynamicView(input: RunDynamicViewInput!): RunEntityRelationshipDisplayComponentViewResult!
  RunEntityRelationshipDisplayComponentViewByID(input: RunViewByIDInput!): RunEntityRelationshipDisplayComponentViewResult!
  RunEntityRelationshipDisplayComponentViewByName(input: RunViewByNameInput!): RunEntityRelationshipDisplayComponentViewResult!
  RunEntityRelationshipDynamicView(input: RunDynamicViewInput!): RunEntityRelationshipViewResult!
  RunEntityRelationshipViewByID(input: RunViewByIDInput!): RunEntityRelationshipViewResult!
  RunEntityRelationshipViewByName(input: RunViewByNameInput!): RunEntityRelationshipViewResult!
  RunEntitySettingDynamicView(input: RunDynamicViewInput!): RunEntitySettingViewResult!
  RunEntitySettingViewByID(input: RunViewByIDInput!): RunEntitySettingViewResult!
  RunEntitySettingViewByName(input: RunViewByNameInput!): RunEntitySettingViewResult!
  RunEntityViewByID(input: RunViewByIDInput!): RunEntityViewResult!
  RunEntityViewByName(input: RunViewByNameInput!): RunEntityViewResult!
  RunErrorLogDynamicView(input: RunDynamicViewInput!): RunErrorLogViewResult!
  RunErrorLogViewByID(input: RunViewByIDInput!): RunErrorLogViewResult!
  RunErrorLogViewByName(input: RunViewByNameInput!): RunErrorLogViewResult!
  RunExplorerNavigationItemDynamicView(input: RunDynamicViewInput!): RunExplorerNavigationItemViewResult!
  RunExplorerNavigationItemViewByID(input: RunViewByIDInput!): RunExplorerNavigationItemViewResult!
  RunExplorerNavigationItemViewByName(input: RunViewByNameInput!): RunExplorerNavigationItemViewResult!
  RunFileCategoryDynamicView(input: RunDynamicViewInput!): RunFileCategoryViewResult!
  RunFileCategoryViewByID(input: RunViewByIDInput!): RunFileCategoryViewResult!
  RunFileCategoryViewByName(input: RunViewByNameInput!): RunFileCategoryViewResult!
  RunFileDynamicView(input: RunDynamicViewInput!): RunFileViewResult!
  RunFileEntityRecordLinkDynamicView(input: RunDynamicViewInput!): RunFileEntityRecordLinkViewResult!
  RunFileEntityRecordLinkViewByID(input: RunViewByIDInput!): RunFileEntityRecordLinkViewResult!
  RunFileEntityRecordLinkViewByName(input: RunViewByNameInput!): RunFileEntityRecordLinkViewResult!
  RunFileStorageProviderDynamicView(input: RunDynamicViewInput!): RunFileStorageProviderViewResult!
  RunFileStorageProviderViewByID(input: RunViewByIDInput!): RunFileStorageProviderViewResult!
  RunFileStorageProviderViewByName(input: RunViewByNameInput!): RunFileStorageProviderViewResult!
  RunFileViewByID(input: RunViewByIDInput!): RunFileViewResult!
  RunFileViewByName(input: RunViewByNameInput!): RunFileViewResult!
  RunIntegrationDynamicView(input: RunDynamicViewInput!): RunIntegrationViewResult!
  RunIntegrationURLFormatDynamicView(input: RunDynamicViewInput!): RunIntegrationURLFormatViewResult!
  RunIntegrationURLFormatViewByID(input: RunViewByIDInput!): RunIntegrationURLFormatViewResult!
  RunIntegrationURLFormatViewByName(input: RunViewByNameInput!): RunIntegrationURLFormatViewResult!
  RunIntegrationViewByID(input: RunViewByIDInput!): RunIntegrationViewResult!
  RunIntegrationViewByName(input: RunViewByNameInput!): RunIntegrationViewResult!
  RunLibraryDynamicView(input: RunDynamicViewInput!): RunLibraryViewResult!
  RunLibraryItemDynamicView(input: RunDynamicViewInput!): RunLibraryItemViewResult!
  RunLibraryItemViewByID(input: RunViewByIDInput!): RunLibraryItemViewResult!
  RunLibraryItemViewByName(input: RunViewByNameInput!): RunLibraryItemViewResult!
  RunLibraryViewByID(input: RunViewByIDInput!): RunLibraryViewResult!
  RunLibraryViewByName(input: RunViewByNameInput!): RunLibraryViewResult!
  RunListCategoryDynamicView(input: RunDynamicViewInput!): RunListCategoryViewResult!
  RunListCategoryViewByID(input: RunViewByIDInput!): RunListCategoryViewResult!
  RunListCategoryViewByName(input: RunViewByNameInput!): RunListCategoryViewResult!
  RunListDetailDynamicView(input: RunDynamicViewInput!): RunListDetailViewResult!
  RunListDetailViewByID(input: RunViewByIDInput!): RunListDetailViewResult!
  RunListDetailViewByName(input: RunViewByNameInput!): RunListDetailViewResult!
  RunListDynamicView(input: RunDynamicViewInput!): RunListViewResult!
  RunListViewByID(input: RunViewByIDInput!): RunListViewResult!
  RunListViewByName(input: RunViewByNameInput!): RunListViewResult!
  RunOutputDeliveryTypeDynamicView(input: RunDynamicViewInput!): RunOutputDeliveryTypeViewResult!
  RunOutputDeliveryTypeViewByID(input: RunViewByIDInput!): RunOutputDeliveryTypeViewResult!
  RunOutputDeliveryTypeViewByName(input: RunViewByNameInput!): RunOutputDeliveryTypeViewResult!
  RunOutputFormatTypeDynamicView(input: RunDynamicViewInput!): RunOutputFormatTypeViewResult!
  RunOutputFormatTypeViewByID(input: RunViewByIDInput!): RunOutputFormatTypeViewResult!
  RunOutputFormatTypeViewByName(input: RunViewByNameInput!): RunOutputFormatTypeViewResult!
  RunOutputTriggerTypeDynamicView(input: RunDynamicViewInput!): RunOutputTriggerTypeViewResult!
  RunOutputTriggerTypeViewByID(input: RunViewByIDInput!): RunOutputTriggerTypeViewResult!
  RunOutputTriggerTypeViewByName(input: RunViewByNameInput!): RunOutputTriggerTypeViewResult!
  RunQueryCategoryDynamicView(input: RunDynamicViewInput!): RunQueryCategoryViewResult!
  RunQueryCategoryViewByID(input: RunViewByIDInput!): RunQueryCategoryViewResult!
  RunQueryCategoryViewByName(input: RunViewByNameInput!): RunQueryCategoryViewResult!
  RunQueryDynamicView(input: RunDynamicViewInput!): RunQueryViewResult!
  RunQueryFieldDynamicView(input: RunDynamicViewInput!): RunQueryFieldViewResult!
  RunQueryFieldViewByID(input: RunViewByIDInput!): RunQueryFieldViewResult!
  RunQueryFieldViewByName(input: RunViewByNameInput!): RunQueryFieldViewResult!
  RunQueryPermissionDynamicView(input: RunDynamicViewInput!): RunQueryPermissionViewResult!
  RunQueryPermissionViewByID(input: RunViewByIDInput!): RunQueryPermissionViewResult!
  RunQueryPermissionViewByName(input: RunViewByNameInput!): RunQueryPermissionViewResult!
  RunQueryViewByID(input: RunViewByIDInput!): RunQueryViewResult!
  RunQueryViewByName(input: RunViewByNameInput!): RunQueryViewResult!
  RunQueueDynamicView(input: RunDynamicViewInput!): RunQueueViewResult!
  RunQueueTaskDynamicView(input: RunDynamicViewInput!): RunQueueTaskViewResult!
  RunQueueTaskViewByID(input: RunViewByIDInput!): RunQueueTaskViewResult!
  RunQueueTaskViewByName(input: RunViewByNameInput!): RunQueueTaskViewResult!
  RunQueueTypeDynamicView(input: RunDynamicViewInput!): RunQueueTypeViewResult!
  RunQueueTypeViewByID(input: RunViewByIDInput!): RunQueueTypeViewResult!
  RunQueueTypeViewByName(input: RunViewByNameInput!): RunQueueTypeViewResult!
  RunQueueViewByID(input: RunViewByIDInput!): RunQueueViewResult!
  RunQueueViewByName(input: RunViewByNameInput!): RunQueueViewResult!
  RunRecommendationDynamicView(input: RunDynamicViewInput!): RunRecommendationViewResult!
  RunRecommendationItemDynamicView(input: RunDynamicViewInput!): RunRecommendationItemViewResult!
  RunRecommendationItemViewByID(input: RunViewByIDInput!): RunRecommendationItemViewResult!
  RunRecommendationItemViewByName(input: RunViewByNameInput!): RunRecommendationItemViewResult!
  RunRecommendationProviderDynamicView(input: RunDynamicViewInput!): RunRecommendationProviderViewResult!
  RunRecommendationProviderViewByID(input: RunViewByIDInput!): RunRecommendationProviderViewResult!
  RunRecommendationProviderViewByName(input: RunViewByNameInput!): RunRecommendationProviderViewResult!
  RunRecommendationRunDynamicView(input: RunDynamicViewInput!): RunRecommendationRunViewResult!
  RunRecommendationRunViewByID(input: RunViewByIDInput!): RunRecommendationRunViewResult!
  RunRecommendationRunViewByName(input: RunViewByNameInput!): RunRecommendationRunViewResult!
  RunRecommendationViewByID(input: RunViewByIDInput!): RunRecommendationViewResult!
  RunRecommendationViewByName(input: RunViewByNameInput!): RunRecommendationViewResult!
  RunRecordChangeDynamicView(input: RunDynamicViewInput!): RunRecordChangeViewResult!
  RunRecordChangeReplayRunDynamicView(input: RunDynamicViewInput!): RunRecordChangeReplayRunViewResult!
  RunRecordChangeReplayRunViewByID(input: RunViewByIDInput!): RunRecordChangeReplayRunViewResult!
  RunRecordChangeReplayRunViewByName(input: RunViewByNameInput!): RunRecordChangeReplayRunViewResult!
  RunRecordChangeViewByID(input: RunViewByIDInput!): RunRecordChangeViewResult!
  RunRecordChangeViewByName(input: RunViewByNameInput!): RunRecordChangeViewResult!
  RunRecordMergeDeletionLogDynamicView(input: RunDynamicViewInput!): RunRecordMergeDeletionLogViewResult!
  RunRecordMergeDeletionLogViewByID(input: RunViewByIDInput!): RunRecordMergeDeletionLogViewResult!
  RunRecordMergeDeletionLogViewByName(input: RunViewByNameInput!): RunRecordMergeDeletionLogViewResult!
  RunRecordMergeLogDynamicView(input: RunDynamicViewInput!): RunRecordMergeLogViewResult!
  RunRecordMergeLogViewByID(input: RunViewByIDInput!): RunRecordMergeLogViewResult!
  RunRecordMergeLogViewByName(input: RunViewByNameInput!): RunRecordMergeLogViewResult!
  RunReportCategoryDynamicView(input: RunDynamicViewInput!): RunReportCategoryViewResult!
  RunReportCategoryViewByID(input: RunViewByIDInput!): RunReportCategoryViewResult!
  RunReportCategoryViewByName(input: RunViewByNameInput!): RunReportCategoryViewResult!
  RunReportDynamicView(input: RunDynamicViewInput!): RunReportViewResult!
  RunReportSnapshotDynamicView(input: RunDynamicViewInput!): RunReportSnapshotViewResult!
  RunReportSnapshotViewByID(input: RunViewByIDInput!): RunReportSnapshotViewResult!
  RunReportSnapshotViewByName(input: RunViewByNameInput!): RunReportSnapshotViewResult!
  RunReportViewByID(input: RunViewByIDInput!): RunReportViewResult!
  RunReportViewByName(input: RunViewByNameInput!): RunReportViewResult!
  RunResourceTypeDynamicView(input: RunDynamicViewInput!): RunResourceTypeViewResult!
  RunResourceTypeViewByID(input: RunViewByIDInput!): RunResourceTypeViewResult!
  RunResourceTypeViewByName(input: RunViewByNameInput!): RunResourceTypeViewResult!
  RunRoleDynamicView(input: RunDynamicViewInput!): RunRoleViewResult!
  RunRoleViewByID(input: RunViewByIDInput!): RunRoleViewResult!
  RunRoleViewByName(input: RunViewByNameInput!): RunRoleViewResult!
  RunRowLevelSecurityFilterDynamicView(input: RunDynamicViewInput!): RunRowLevelSecurityFilterViewResult!
  RunRowLevelSecurityFilterViewByID(input: RunViewByIDInput!): RunRowLevelSecurityFilterViewResult!
  RunRowLevelSecurityFilterViewByName(input: RunViewByNameInput!): RunRowLevelSecurityFilterViewResult!
  RunScheduledActionDynamicView(input: RunDynamicViewInput!): RunScheduledActionViewResult!
  RunScheduledActionParamDynamicView(input: RunDynamicViewInput!): RunScheduledActionParamViewResult!
  RunScheduledActionParamViewByID(input: RunViewByIDInput!): RunScheduledActionParamViewResult!
  RunScheduledActionParamViewByName(input: RunViewByNameInput!): RunScheduledActionParamViewResult!
  RunScheduledActionViewByID(input: RunViewByIDInput!): RunScheduledActionViewResult!
  RunScheduledActionViewByName(input: RunViewByNameInput!): RunScheduledActionViewResult!
  RunSchemaInfoDynamicView(input: RunDynamicViewInput!): RunSchemaInfoViewResult!
  RunSchemaInfoViewByID(input: RunViewByIDInput!): RunSchemaInfoViewResult!
  RunSchemaInfoViewByName(input: RunViewByNameInput!): RunSchemaInfoViewResult!
  RunSkillDynamicView(input: RunDynamicViewInput!): RunSkillViewResult!
  RunSkillViewByID(input: RunViewByIDInput!): RunSkillViewResult!
  RunSkillViewByName(input: RunViewByNameInput!): RunSkillViewResult!
  RunTagDynamicView(input: RunDynamicViewInput!): RunTagViewResult!
  RunTagViewByID(input: RunViewByIDInput!): RunTagViewResult!
  RunTagViewByName(input: RunViewByNameInput!): RunTagViewResult!
  RunTaggedItemDynamicView(input: RunDynamicViewInput!): RunTaggedItemViewResult!
  RunTaggedItemViewByID(input: RunViewByIDInput!): RunTaggedItemViewResult!
  RunTaggedItemViewByName(input: RunViewByNameInput!): RunTaggedItemViewResult!
  RunTemplateCategoryDynamicView(input: RunDynamicViewInput!): RunTemplateCategoryViewResult!
  RunTemplateCategoryViewByID(input: RunViewByIDInput!): RunTemplateCategoryViewResult!
  RunTemplateCategoryViewByName(input: RunViewByNameInput!): RunTemplateCategoryViewResult!
  RunTemplateContentDynamicView(input: RunDynamicViewInput!): RunTemplateContentViewResult!
  RunTemplateContentTypeDynamicView(input: RunDynamicViewInput!): RunTemplateContentTypeViewResult!
  RunTemplateContentTypeViewByID(input: RunViewByIDInput!): RunTemplateContentTypeViewResult!
  RunTemplateContentTypeViewByName(input: RunViewByNameInput!): RunTemplateContentTypeViewResult!
  RunTemplateContentViewByID(input: RunViewByIDInput!): RunTemplateContentViewResult!
  RunTemplateContentViewByName(input: RunViewByNameInput!): RunTemplateContentViewResult!
  RunTemplateDynamicView(input: RunDynamicViewInput!): RunTemplateViewResult!
  RunTemplateParamDynamicView(input: RunDynamicViewInput!): RunTemplateParamViewResult!
  RunTemplateParamViewByID(input: RunViewByIDInput!): RunTemplateParamViewResult!
  RunTemplateParamViewByName(input: RunViewByNameInput!): RunTemplateParamViewResult!
  RunTemplateViewByID(input: RunViewByIDInput!): RunTemplateViewResult!
  RunTemplateViewByName(input: RunViewByNameInput!): RunTemplateViewResult!
  RunUserApplicationDynamicView(input: RunDynamicViewInput!): RunUserApplicationViewResult!
  RunUserApplicationEntityDynamicView(input: RunDynamicViewInput!): RunUserApplicationEntityViewResult!
  RunUserApplicationEntityViewByID(input: RunViewByIDInput!): RunUserApplicationEntityViewResult!
  RunUserApplicationEntityViewByName(input: RunViewByNameInput!): RunUserApplicationEntityViewResult!
  RunUserApplicationViewByID(input: RunViewByIDInput!): RunUserApplicationViewResult!
  RunUserApplicationViewByName(input: RunViewByNameInput!): RunUserApplicationViewResult!
  RunUserDynamicView(input: RunDynamicViewInput!): RunUserViewResult!
  RunUserFavoriteDynamicView(input: RunDynamicViewInput!): RunUserFavoriteViewResult!
  RunUserFavoriteViewByID(input: RunViewByIDInput!): RunUserFavoriteViewResult!
  RunUserFavoriteViewByName(input: RunViewByNameInput!): RunUserFavoriteViewResult!
  RunUserNotificationDynamicView(input: RunDynamicViewInput!): RunUserNotificationViewResult!
  RunUserNotificationViewByID(input: RunViewByIDInput!): RunUserNotificationViewResult!
  RunUserNotificationViewByName(input: RunViewByNameInput!): RunUserNotificationViewResult!
  RunUserRecordLogDynamicView(input: RunDynamicViewInput!): RunUserRecordLogViewResult!
  RunUserRecordLogViewByID(input: RunViewByIDInput!): RunUserRecordLogViewResult!
  RunUserRecordLogViewByName(input: RunViewByNameInput!): RunUserRecordLogViewResult!
  RunUserRoleDynamicView(input: RunDynamicViewInput!): RunUserRoleViewResult!
  RunUserRoleViewByID(input: RunViewByIDInput!): RunUserRoleViewResult!
  RunUserRoleViewByName(input: RunViewByNameInput!): RunUserRoleViewResult!
  RunUserViewByID(input: RunViewByIDInput!): RunUserViewResult!
  RunUserViewByName(input: RunViewByNameInput!): RunUserViewResult!
  RunUserViewCategoryDynamicView(input: RunDynamicViewInput!): RunUserViewCategoryViewResult!
  RunUserViewCategoryViewByID(input: RunViewByIDInput!): RunUserViewCategoryViewResult!
  RunUserViewCategoryViewByName(input: RunViewByNameInput!): RunUserViewCategoryViewResult!
  RunUserViewDynamicView(input: RunDynamicViewInput!): RunUserViewViewResult!
  RunUserViewRunDetailDynamicView(input: RunDynamicViewInput!): RunUserViewRunDetailViewResult!
  RunUserViewRunDetailViewByID(input: RunViewByIDInput!): RunUserViewRunDetailViewResult!
  RunUserViewRunDetailViewByName(input: RunViewByNameInput!): RunUserViewRunDetailViewResult!
  RunUserViewRunDynamicView(input: RunDynamicViewInput!): RunUserViewRunViewResult!
  RunUserViewRunViewByID(input: RunViewByIDInput!): RunUserViewRunViewResult!
  RunUserViewRunViewByName(input: RunViewByNameInput!): RunUserViewRunViewResult!
  RunUserViewViewByID(input: RunViewByIDInput!): RunUserViewViewResult!
  RunUserViewViewByName(input: RunViewByNameInput!): RunUserViewViewResult!
  RunVectorDatabaseDynamicView(input: RunDynamicViewInput!): RunVectorDatabaseViewResult!
  RunVectorDatabaseViewByID(input: RunViewByIDInput!): RunVectorDatabaseViewResult!
  RunVectorDatabaseViewByName(input: RunViewByNameInput!): RunVectorDatabaseViewResult!
  RunVectorIndexDynamicView(input: RunDynamicViewInput!): RunVectorIndexViewResult!
  RunVectorIndexViewByID(input: RunViewByIDInput!): RunVectorIndexViewResult!
  RunVectorIndexViewByName(input: RunViewByNameInput!): RunVectorIndexViewResult!
  RunVersionInstallationDynamicView(input: RunDynamicViewInput!): RunVersionInstallationViewResult!
  RunVersionInstallationViewByID(input: RunViewByIDInput!): RunVersionInstallationViewResult!
  RunVersionInstallationViewByName(input: RunViewByNameInput!): RunVersionInstallationViewResult!
  RunViewByID(input: RunViewByIDInput!): RunViewResult!
  RunViewByName(input: RunViewByNameInput!): RunViewResult!
  RunViews(input: [RunViewGenericInput!]!): [RunViewGenericResult!]!
  RunWorkflowDynamicView(input: RunDynamicViewInput!): RunWorkflowViewResult!
  RunWorkflowEngineDynamicView(input: RunDynamicViewInput!): RunWorkflowEngineViewResult!
  RunWorkflowEngineViewByID(input: RunViewByIDInput!): RunWorkflowEngineViewResult!
  RunWorkflowEngineViewByName(input: RunViewByNameInput!): RunWorkflowEngineViewResult!
  RunWorkflowRunDynamicView(input: RunDynamicViewInput!): RunWorkflowRunViewResult!
  RunWorkflowRunViewByID(input: RunViewByIDInput!): RunWorkflowRunViewResult!
  RunWorkflowRunViewByName(input: RunViewByNameInput!): RunWorkflowRunViewResult!
  RunWorkflowViewByID(input: RunViewByIDInput!): RunWorkflowViewResult!
  RunWorkflowViewByName(input: RunViewByNameInput!): RunWorkflowViewResult!
  RunWorkspaceDynamicView(input: RunDynamicViewInput!): RunWorkspaceViewResult!
  RunWorkspaceItemDynamicView(input: RunDynamicViewInput!): RunWorkspaceItemViewResult!
  RunWorkspaceItemViewByID(input: RunViewByIDInput!): RunWorkspaceItemViewResult!
  RunWorkspaceItemViewByName(input: RunViewByNameInput!): RunWorkspaceItemViewResult!
  RunWorkspaceViewByID(input: RunViewByIDInput!): RunWorkspaceViewResult!
  RunWorkspaceViewByName(input: RunViewByNameInput!): RunWorkspaceViewResult!
  Runflyway_schema_historyDynamicView(input: RunDynamicViewInput!): Runflyway_schema_historyViewResult!
  Runflyway_schema_historyViewByID(input: RunViewByIDInput!): Runflyway_schema_historyViewResult!
  Runflyway_schema_historyViewByName(input: RunViewByNameInput!): Runflyway_schema_historyViewResult!
  ScheduledAction(ID: String!): ScheduledAction_
  ScheduledActionParam(ID: String!): ScheduledActionParam_
  SchemaInfo(ID: String!): SchemaInfo_
  Skill(ID: String!): Skill_
  Tag(ID: String!): Tag_
  TaggedItem(ID: String!): TaggedItem_
  Template(ID: String!): Template_
  TemplateCategory(ID: String!): TemplateCategory_
  TemplateContent(ID: String!): TemplateContent_
  TemplateContentType(ID: String!): TemplateContentType_
  TemplateParam(ID: String!): TemplateParam_
  UpdateWhereClause(ID: String!): [UserView_!]!
  User(ID: String!): User_
  UserApplication(ID: String!): UserApplication_
  UserApplicationEntity(ID: String!): UserApplicationEntity_
  UserByEmail(Email: String!): User_!
  UserByEmployeeID(EmployeeID: Int!): User_!
  UserByID(ID: Int!): User_!
  UserFavorite(ID: String!): UserFavorite_
  UserFavoriteSearchByParams(params: Int!): [UserFavorite_!]!
  UserFavoritesByUserID(UserID: Int!): [UserFavorite_!]!
  UserNotification(ID: String!): UserNotification_
  UserRecordLog(ID: String!): UserRecordLog_
  UserRole(ID: String!): UserRole_
  UserView(ID: String!): UserView_
  UserViewCategory(ID: String!): UserViewCategory_
  UserViewRun(ID: String!): UserViewRun_
  UserViewRunDetail(ID: String!): UserViewRunDetail_
  UserViewsByUserID(UserID: Int!): [UserView_!]!
  VectorDatabase(ID: String!): VectorDatabase_
  VectorIndex(ID: String!): VectorIndex_
  VersionInstallation(ID: String!): VersionInstallation_
  Workflow(ID: String!): Workflow_
  WorkflowEngine(ID: String!): WorkflowEngine_
  WorkflowRun(ID: String!): WorkflowRun_
  Workspace(ID: String!): Workspace_
  WorkspaceItem(ID: String!): WorkspaceItem_
  colors: [Color!]!
  flyway_schema_history(installed_rank: Int!): flyway_schema_history_
}

type QueryCategory_ {
  Description: String
  ID: String!
  Name: String!
  Parent: String
  ParentID: String
  QueriesArray: [Query_!]!
  QueryCategoriesArray: [QueryCategory_!]!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type QueryField_ {
  ComputationDescription: String
  Description: String
  ID: String!
  IsComputed: Boolean!
  IsSummary: Boolean!
  Name: String!
  Query: String!
  QueryID: String!

  """
  The base type, not including parameters, in SQL. For example this field would be nvarchar or decimal, and wouldn't include type parameters. The SQLFullType field provides that information.
  """
  SQLBaseType: String!

  """
  The full SQL type for the field, for example datetime or nvarchar(10) etc.
  """
  SQLFullType: String!
  Sequence: Int!
  SourceEntity: String
  SourceEntityID: String
  SourceFieldName: String
  SummaryDescription: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type QueryPermission_ {
  ID: String!
  Query: String!
  QueryID: String!
  Role: String!
  RoleID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Catalog of stored queries. This is useful for any arbitrary query that is known to be performant and correct and can be reused. Queries can be viewed/run by a user, used programatically via RunQuery, and also used by AI systems for improved reliability instead of dynamically generated SQL. Queries can also improve security since they store the SQL instead of using dynamic SQL.
"""
type Query_ {
  Category: String
  CategoryID: String
  DataContextItemsArray: [DataContextItem_!]!
  Description: String

  """
  Higher numbers indicate more execution overhead/time required. Useful for planning which queries to use in various scenarios.
  """
  ExecutionCostRank: Int
  Feedback: String
  ID: String!
  Name: String!
  OriginalSQL: String

  """
  Value indicating the quality of the query, higher values mean a better quality
  """
  QualityRank: Int
  QueryFieldsArray: [QueryField_!]!
  QueryPermissionsArray: [QueryPermission_!]!
  SQL: String
  Status: String!
  TechnicalDescription: String
  UserQuestion: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type QueueTask_ {
  Comments: String
  Data: String
  EndedAt: Timestamp
  ErrorMessage: String
  ID: String!
  Options: String
  Output: String
  Queue: String!
  QueueID: String!
  StartedAt: Timestamp
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type QueueType_ {
  Description: String
  DriverClass: String!
  DriverImportPath: String
  ID: String!
  IsActive: Boolean!
  Name: String!
  QueuesArray: [Queue_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Queues can be used to async execute long running tasks"""
type Queue_ {
  Description: String
  ID: String!
  IsActive: Boolean!
  LastHeartbeat: Timestamp!
  Name: String!
  ProcessCwd: String
  ProcessHostName: String
  ProcessIPAddress: String
  ProcessMacAddress: String
  ProcessOSName: String
  ProcessOSVersion: String
  ProcessPID: Int
  ProcessPlatform: String
  ProcessUserID: String
  ProcessUserName: String
  ProcessVersion: String
  QueueTasksArray: [QueueTask_!]!
  QueueType: String!
  QueueTypeID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Table to store individual recommendation items that are the right side of the recommendation which we track in the DestinationEntityID/DestinationEntityRecordID
"""
type RecommendationItem_ {
  DestinationEntity: String!
  DestinationEntityID: String!

  """The record ID of the destination entity"""
  DestinationEntityRecordID: String!
  ID: String!

  """
  A value between 0 and 1 indicating the probability of the match, higher numbers indicating a more certain match/recommendation.
  """
  MatchProbability: Float
  RecommendationID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Recommendation providers details"""
type RecommendationProvider_ {
  Description: String
  ID: String!
  Name: String!
  RecommendationRunsArray: [RecommendationRun_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Recommendation runs log each time a provider is requested to provide recommendations
"""
type RecommendationRun_ {
  Description: String

  """The end date of the recommendation run"""
  EndDate: Timestamp
  ID: String!
  RecommendationProvider: String!
  RecommendationProviderID: String!
  RecommendationsArray: [Recommendation_!]!
  RunByUser: String!
  RunByUserID: String!

  """The start date of the recommendation run"""
  StartDate: Timestamp!

  """The status of the recommendation run"""
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Recommendation headers that store the left side of the recommendation which we track in the SourceEntityID/SourceEntityRecordID
"""
type Recommendation_ {
  ID: String!
  RecommendationItemsArray: [RecommendationItem_!]!
  RecommendationRunID: String!
  SourceEntity: String!
  SourceEntityID: String!

  """The record ID of the source entity"""
  SourceEntityRecordID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Table to track the runs of replaying external record changes"""
type RecordChangeReplayRun_ {
  """Timestamp when the replay run ended"""
  EndedAt: Timestamp
  ID: String!
  RecordChangesArray: [RecordChange_!]!

  """Timestamp when the replay run started"""
  StartedAt: Timestamp!

  """Status of the replay run (Pending, In Progress, Complete, Error)"""
  Status: String!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
For entities that have TrackRecordChanges=1, Record Changes will store the history of all changes made within the system. For integrations you can directly add values here if you have inbound signals indicating records were changed in a source system. This entity only automatically captures Record Changes if they were made within the system.
"""
type RecordChange_ {
  """The date/time that the change occured."""
  ChangedAt: Timestamp!

  """A generated, human-readable description of what was changed."""
  ChangesDescription: String!

  """JSON structure that describes what was changed in a structured format."""
  ChangesJSON: String!
  Comments: String
  CreatedAt: Timestamp!
  Entity: String!
  EntityID: String!
  ErrorLog: String

  """
  A complete snapshot of the record AFTER the change was applied in a JSON format that can be parsed.
  """
  FullRecordJSON: String!
  ID: String!
  Integration: String
  IntegrationID: String
  RecordID: String!
  ReplayRunID: String

  """Internal or External"""
  Source: String!

  """
  For internal record changes generated within MJ, the status is immediately Complete. For external changes that are detected, the workflow starts off as Pending, then In Progress and finally either Complete or Error
  """
  Status: String!

  """Create, Update, or Delete"""
  Type: String!
  UpdatedAt: Timestamp!
  User: String!
  UserID: String!
}

type RecordDependencyResult {
  CompositeKey: CompositeKeyOutputType!
  EntityName: String!
  FieldName: String!
  RelatedEntityName: String!
}

type RecordMergeDeletionLog_ {
  DeletedRecordID: String!
  ID: String!
  ProcessingLog: String
  RecordMergeLogID: String!
  Status: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type RecordMergeDetailResult {
  CompositeKey: CompositeKeyOutputType!
  Message: String
  RecordMergeDeletionLogID: Int
  Success: Boolean!
}

type RecordMergeLog_ {
  ApprovalStatus: String!
  ApprovedByUser: String
  ApprovedByUserID: String
  Comments: String
  DuplicateRunDetailMatchesArray: [DuplicateRunDetailMatch_!]!
  Entity: String!
  EntityID: String!
  ID: String!
  InitiatedByUser: String!
  InitiatedByUserID: String!
  ProcessingEndedAt: Timestamp
  ProcessingLog: String
  ProcessingStartedAt: Timestamp!
  ProcessingStatus: String!
  RecordMergeDeletionLogsArray: [RecordMergeDeletionLog_!]!
  SurvivingRecordID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input RecordMergeRequest {
  EntityName: String!
  FieldMap: [FieldMapping!]
  RecordsToMerge: [CompositeKeyInputType!]!
  SurvivingRecordCompositeKey: CompositeKeyInputType!
}

type RecordMergeRequestOutput {
  EntityName: String!
  FieldMap: [FieldMappingOutput!]
  RecordsToMerge: [Int!]!
  SurvivingRecordID: Int!
}

type RecordMergeResult {
  OverallStatus: String
  RecordMergeLogID: Int
  RecordStatus: [RecordMergeDetailResult!]!
  Request: RecordMergeRequestOutput!
  Success: Boolean!
}

type ReportCategory_ {
  Description: String
  ID: String!
  Name: String!
  Parent: String
  ParentID: String
  ReportCategoriesArray: [ReportCategory_!]!
  ReportsArray: [Report_!]!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type ReportSnapshot_ {
  ID: String!
  Report: String!
  ReportID: String!
  ResultSet: String!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type Report_ {
  Category: String
  CategoryID: String
  Configuration: String
  Conversation: String
  ConversationDetailID: String
  ConversationID: String
  DataContext: String
  DataContextID: String
  Description: String
  ID: String!
  Name: String!
  OutputDeliveryType: String
  OutputDeliveryTypeID: String
  OutputFormatType: String
  OutputFormatTypeID: String
  OutputFrequency: String
  OutputTargetEmail: String
  OutputTriggerType: String
  OutputTriggerTypeID: String
  OutputWorkflow: String
  OutputWorkflowID: String
  ReportSnapshotsArray: [ReportSnapshot_!]!
  SharingScope: String!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type ResourceType_ {
  Description: String
  DisplayName: String!
  Entity: String
  EntityID: String
  ID: String!
  Icon: String
  Name: String!
  UserNotificationsArray: [UserNotification_!]!
  WorkspaceItemsArray: [WorkspaceItem_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Roles are used for security administration and can have zero to many Users as members
"""
type Role_ {
  AuthorizationRolesArray: [AuthorizationRole_!]!

  """Description of the role"""
  Description: String

  """
  The unique ID of the role in the directory being used for authentication, for example an ID in Azure.
  """
  DirectoryID: String
  EmployeeRolesArray: [EmployeeRole_!]!
  EntityPermissionsArray: [EntityPermission_!]!
  ID: String!
  Name: String!
  QueryPermissionsArray: [QueryPermission_!]!

  """
  The name of the role in the database, this is used for auto-generating permission statements by CodeGen
  """
  SQLName: String
  UserRolesArray: [UserRole_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type RowLevelSecurityFilter_ {
  Description: String
  EntityPermissionsArray: [EntityPermission_!]!
  FilterText: String
  ID: String!
  Name: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type RunAIActionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AIAction_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunAIModelActionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AIModelAction_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunAIModelTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AIModelType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunAIModelViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AIModel_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionAuthorizationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActionAuthorization_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActionCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionContextTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActionContextType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionContextViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActionContext_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionExecutionLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActionExecutionLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionFilterViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActionFilter_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionLibraryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActionLibrary_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionParamViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActionParam_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionResultCodeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActionResultCode_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunActionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Action_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunApplicationEntityViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ApplicationEntity_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunApplicationSettingViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ApplicationSetting_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunApplicationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Application_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunAuditLogTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AuditLogType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunAuditLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AuditLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunAuthorizationRoleViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AuthorizationRole_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunAuthorizationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Authorization_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCommunicationBaseMessageTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CommunicationBaseMessageType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCommunicationLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CommunicationLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCommunicationProviderMessageTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CommunicationProviderMessageType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCommunicationProviderViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CommunicationProvider_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCommunicationRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CommunicationRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCompanyIntegrationRecordMapViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegrationRecordMap_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCompanyIntegrationRunAPILogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegrationRunAPILog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCompanyIntegrationRunDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegrationRunDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCompanyIntegrationRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegrationRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCompanyIntegrationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegration_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunCompanyViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Company_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunConversationDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ConversationDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunConversationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Conversation_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunDashboardCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DashboardCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunDashboardViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Dashboard_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunDataContextItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DataContextItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunDataContextViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DataContext_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunDatasetItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DatasetItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunDatasetViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Dataset_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunDuplicateRunDetailMatchViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DuplicateRunDetailMatch_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunDuplicateRunDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DuplicateRunDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunDuplicateRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DuplicateRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

input RunDynamicViewInput {
  """
  if provided and either ForceAuditLog is set, or the entity's property settings for logging view runs are set to true, this will be used as the Audit Log Description.
  """
  AuditLogDescription: String
  EntityName: String!

  """
  Pass in a UserViewRun ID value to exclude all records from that run from results
  """
  ExcludeUserViewRunID: String

  """
  Optional, pass in a valid condition to use as the view WHERE clause. For example, UpdatedAt >= Some Date - if not provided, no filter is applied
  """
  ExtraFilter: String

  """
  Optional, array of entity field names, if not provided, all columns are returned. If provided, only the fields in the array are returned.
  """
  Fields: [String!]

  """
  If set to true, an Audit Log record will be created for the view run, regardless of the property settings in the entity for auditing view runs
  """
  ForceAuditLog: Boolean

  """
  if set to true, if there IS any UserViewMaxRows property set for the entity in question, it will be IGNORED. This is useful in scenarios where you want to programmatically run a view and get ALL the data back, regardless of the MaxRows setting on the entity.
  """
  IgnoreMaxRows: Boolean

  """
  if a value > 0 is provided, and IgnoreMaxRows is set to false, this value is used for the max rows to be returned by the view.
  """
  MaxRows: Int

  """
  Optional, pass in a valid order by clause sort the results on the server. For example, CreatedAt DESC to order by row creation date in reverse order. Any Valid SQL Order By clause is okay - if not provided, no server-side sorting is applied
  """
  OrderBy: String

  """
  Pass in a valid condition to append to the view WHERE clause to override the Exclude List. For example, UpdatedAt >= Some Date
  """
  OverrideExcludeFilter: String

  """
  Optional, pass in entity_object, simple, or count_only as options to specify the type of result you want back. Defaults to simple if not provided
  """
  ResultType: String

  """
  If a value > 0 is provided, this value will be used to offset the rows returned.
  """
  StartRow: Int
  UserSearchString: String
}

type RunEmployeeCompanyIntegrationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EmployeeCompanyIntegration_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEmployeeRoleViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EmployeeRole_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEmployeeSkillViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EmployeeSkill_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEmployeeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Employee_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityAIActionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityAIAction_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityActionFilterViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityActionFilter_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityActionInvocationTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityActionInvocationType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityActionInvocationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityActionInvocation_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityActionParamViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityActionParam_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityActionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityAction_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityCommunicationFieldViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityCommunicationField_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityCommunicationMessageTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityCommunicationMessageType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityCommunicationResultType {
  ErrorMessage: String
  Results: JSONObject
  Success: Boolean!
}

type RunEntityDocumentRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityDocumentRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityDocumentSettingViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityDocumentSetting_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityDocumentTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityDocumentType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityDocumentViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityDocument_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityFieldValueViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityFieldValue_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityFieldViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityField_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityPermissionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityPermission_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityRecordDocumentViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityRecordDocument_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityRelationshipDisplayComponentViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityRelationshipDisplayComponent_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityRelationshipViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityRelationship_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntitySettingViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntitySetting_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunEntityViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Entity_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunErrorLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ErrorLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunExplorerNavigationItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ExplorerNavigationItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunFileCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [FileCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunFileEntityRecordLinkViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [FileEntityRecordLink_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunFileStorageProviderViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [FileStorageProvider_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunFileViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [File_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunIntegrationURLFormatViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [IntegrationURLFormat_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunIntegrationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Integration_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunLibraryItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [LibraryItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunLibraryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Library_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunListCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ListCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunListDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ListDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunListViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [List_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunOutputDeliveryTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [OutputDeliveryType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunOutputFormatTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [OutputFormatType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunOutputTriggerTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [OutputTriggerType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunQueryCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueryCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunQueryFieldViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueryField_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunQueryPermissionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueryPermission_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunQueryResultType {
  ErrorMessage: String!
  ExecutionTime: Float!
  QueryID: String!
  Results: String!
  RowCount: Float!
  Success: Boolean!
}

type RunQueryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Query_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunQueueTaskViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueueTask_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunQueueTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueueType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunQueueViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Queue_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRecommendationItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecommendationItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRecommendationProviderViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecommendationProvider_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRecommendationRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecommendationRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRecommendationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Recommendation_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRecordChangeReplayRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecordChangeReplayRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRecordChangeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecordChange_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRecordMergeDeletionLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecordMergeDeletionLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRecordMergeLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecordMergeLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunReportCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ReportCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunReportResultType {
  ErrorMessage: String!
  ExecutionTime: Float!
  ReportID: String!
  Results: String!
  RowCount: Float!
  Success: Boolean!
}

type RunReportSnapshotViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ReportSnapshot_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunReportViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Report_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunResourceTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ResourceType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRoleViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Role_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunRowLevelSecurityFilterViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RowLevelSecurityFilter_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunScheduledActionParamViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ScheduledActionParam_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunScheduledActionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ScheduledAction_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunSchemaInfoViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [SchemaInfo_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunSkillViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Skill_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunTagViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Tag_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunTaggedItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [TaggedItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunTemplateCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [TemplateCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunTemplateContentTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [TemplateContentType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunTemplateContentViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [TemplateContent_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunTemplateParamViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [TemplateParam_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunTemplateViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Template_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserApplicationEntityViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserApplicationEntity_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserApplicationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserApplication_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserFavoriteViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserFavorite_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserNotificationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserNotification_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserRecordLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserRecordLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserRoleViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserRole_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserViewCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserViewCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [User_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserViewRunDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserViewRunDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserViewRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserViewRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunUserViewViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserView_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunVectorDatabaseViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [VectorDatabase_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunVectorIndexViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [VectorIndex_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunVersionInstallationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [VersionInstallation_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

input RunViewByIDInput {
  """
  if provided and either ForceAuditLog is set, or the entity's property settings for logging view runs are set to true, this will be used as the Audit Log Description.
  """
  AuditLogDescription: String

  """
  if set to true, the resulting data will filter out ANY records that were ever returned by this view, when the SaveViewResults property was set to true. This is useful if you want to run a particular view over time and make sure the results returned each time are new to the view.
  """
  ExcludeDataFromAllPriorViewRuns: Boolean

  """
  Pass in a UserViewRun ID value to exclude all records from that run from results
  """
  ExcludeUserViewRunID: String

  """
  Optional, pass in a valid condition to append to the view WHERE clause. For example, UpdatedAt >= Some Date - if not provided, no filter is applied
  """
  ExtraFilter: String

  """
  Optional, array of entity field names, if not provided, ID and all other columns used in the view columns are returned. If provided, only the fields in the array are returned.
  """
  Fields: [String!]

  """
  If set to true, an Audit Log record will be created for the view run, regardless of the property settings in the entity for auditing view runs
  """
  ForceAuditLog: Boolean

  """
  if set to true, if there IS any UserViewMaxRows property set for the entity in question, it will be IGNORED. This is useful in scenarios where you want to programmatically run a view and get ALL the data back, regardless of the MaxRows setting on the entity.
  """
  IgnoreMaxRows: Boolean

  """
  if a value > 0 is provided, and IgnoreMaxRows is set to false, this value is used for the max rows to be returned by the view.
  """
  MaxRows: Int

  """
  Optional, pass in a valid order by clause sort the results on the server. For example, CreatedAt DESC to order by row creation date in reverse order. Any Valid SQL Order By clause is okay - if not provided, no server-side sorting is applied
  """
  OrderBy: String

  """
  Pass in a valid condition to append to the view WHERE clause to override the Exclude List. For example, UpdatedAt >= Some Date
  """
  OverrideExcludeFilter: String

  """
  Optional, pass in entity_object, simple, or count_only as options to specify the type of result you want back. Defaults to simple if not provided
  """
  ResultType: String

  """
  If set to True, the results of this view are saved into a new UserViewRun record and the UserViewRun.ID is passed back in the results.
  """
  SaveViewResults: Boolean

  """
  If a value > 0 is provided, this value will be used to offset the rows returned.
  """
  StartRow: Int
  UserSearchString: String
  ViewID: String!
}

input RunViewByNameInput {
  """
  if provided and either ForceAuditLog is set, or the entity's property settings for logging view runs are set to true, this will be used as the Audit Log Description.
  """
  AuditLogDescription: String

  """
  if set to true, the resulting data will filter out ANY records that were ever returned by this view, when the SaveViewResults property was set to true. This is useful if you want to run a particular view over time and make sure the results returned each time are new to the view.
  """
  ExcludeDataFromAllPriorViewRuns: Boolean

  """
  Pass in a UserViewRun ID value to exclude all records from that run from results
  """
  ExcludeUserViewRunID: String

  """
  Optional, pass in a valid condition to append to the view WHERE clause. For example, UpdatedAt >= Some Date - if not provided, no filter is applied
  """
  ExtraFilter: String

  """
  Optional, array of entity field names, if not provided, ID and all other columns used in the view are returned. If provided, only the fields in the array are returned.
  """
  Fields: [String!]

  """
  If set to true, an Audit Log record will be created for the view run, regardless of the property settings in the entity for auditing view runs
  """
  ForceAuditLog: Boolean

  """
  if set to true, if there IS any UserViewMaxRows property set for the entity in question, it will be IGNORED. This is useful in scenarios where you want to programmatically run a view and get ALL the data back, regardless of the MaxRows setting on the entity.
  """
  IgnoreMaxRows: Boolean

  """
  if a value > 0 is provided, and IgnoreMaxRows is set to false, this value is used for the max rows to be returned by the view.
  """
  MaxRows: Int

  """
  Optional, pass in a valid order by clause sort the results on the server. For example, CreatedAt DESC to order by row creation date in reverse order. Any Valid SQL Order By clause is okay - if not provided, no server-side sorting is applied
  """
  OrderBy: String

  """
  Pass in a valid condition to append to the view WHERE clause to override the Exclude List. For example, UpdatedAt >= Some Date
  """
  OverrideExcludeFilter: String

  """
  Optional, pass in entity_object, simple, or count_only as options to specify the type of result you want back. Defaults to simple if not provided
  """
  ResultType: String

  """
  If set to True, the results of this view are saved into a new UserViewRun record and the UserViewRun.ID is passed back in the results.
  """
  SaveViewResults: Boolean

  """
  If a value > 0 is provided, this value will be used to offset the rows returned.
  """
  StartRow: Int
  UserSearchString: String
  ViewName: String!
}

input RunViewGenericInput {
  """
  if provided and either ForceAuditLog is set, or the entity's property settings for logging view runs are set to true, this will be used as the Audit Log Description.
  """
  AuditLogDescription: String
  EntityName: String!

  """
  if set to true, the resulting data will filter out ANY records that were ever returned by this view, when the SaveViewResults property was set to true. This is useful if you want to run a particular view over time and make sure the results returned each time are new to the view.
  """
  ExcludeDataFromAllPriorViewRuns: Boolean

  """
  Pass in a UserViewRun ID value to exclude all records from that run from results
  """
  ExcludeUserViewRunID: String

  """
  Optional, pass in a valid condition to use as the view WHERE clause. For example, UpdatedAt >= Some Date - if not provided, no filter is applied
  """
  ExtraFilter: String

  """
  Optional, array of entity field names, if not provided, all columns are returned. If provided, only the fields in the array are returned.
  """
  Fields: [String!]

  """
  If set to true, an Audit Log record will be created for the view run, regardless of the property settings in the entity for auditing view runs
  """
  ForceAuditLog: Boolean

  """
  if set to true, if there IS any UserViewMaxRows property set for the entity in question, it will be IGNORED. This is useful in scenarios where you want to programmatically run a view and get ALL the data back, regardless of the MaxRows setting on the entity.
  """
  IgnoreMaxRows: Boolean

  """
  if a value > 0 is provided, and IgnoreMaxRows is set to false, this value is used for the max rows to be returned by the view.
  """
  MaxRows: Int

  """
  Optional, pass in a valid order by clause sort the results on the server. For example, CreatedAt DESC to order by row creation date in reverse order. Any Valid SQL Order By clause is okay - if not provided, no server-side sorting is applied
  """
  OrderBy: String

  """
  Pass in a valid condition to append to the view WHERE clause to override the Exclude List. For example, UpdatedAt >= Some Date
  """
  OverrideExcludeFilter: String

  """
  Optional, pass in entity_object, simple, or count_only as options to specify the type of result you want back. Defaults to simple if not provided
  """
  ResultType: String

  """
  If set to True, the results of this view are saved into a new UserViewRun record and the UserViewRun.ID is passed back in the results.
  """
  SaveViewResults: Boolean

  """
  If a value > 0 is provided, this value will be used to offset the rows returned.
  """
  StartRow: Int
  UserSearchString: String
}

type RunViewGenericResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RunViewGenericResultRow!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunViewGenericResultRow {
  Data: String!
  EntityID: String!
  ID: String!
}

type RunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RunViewResultRow!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunViewResultRow {
  Data: String!
  EntityID: String!
  ID: Int!
}

type RunWorkflowEngineViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [WorkflowEngine_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunWorkflowRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [WorkflowRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunWorkflowViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Workflow_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunWorkspaceItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [WorkspaceItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type RunWorkspaceViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Workspace_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type Runflyway_schema_historyViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [flyway_schema_history_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: String
}

type ScheduledActionParam_ {
  ActionParam: String!
  ActionParamID: String!
  Comments: String
  ID: String!
  ScheduledAction: String!
  ScheduledActionID: String!
  Value: String
  ValueType: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Track scheduled actions and their details"""
type ScheduledAction_ {
  Action: String!
  ActionID: String!
  CreatedByUser: String!
  CreatedByUserID: String!

  """
  Cron expression defining the schedule, automatically maintained by the system unless Type is Custom, in which case the user directly sets this
  """
  CronExpression: String
  CustomCronExpression: String

  """Day of the month for the scheduled action"""
  DayOfMonth: Int

  """Day of the week for the scheduled action"""
  DayOfWeek: String
  Description: String
  ID: String!

  """Interval in days for the scheduled action"""
  IntervalDays: Int

  """Month for the scheduled action"""
  Month: String
  Name: String!
  ScheduledActionParamsArray: [ScheduledActionParam_!]!

  """Status of the scheduled action (Pending, Active, Disabled, Expired)"""
  Status: String!

  """Timezone for the scheduled action, if not specified defaults to UTC/Z"""
  Timezone: String!

  """Type of the scheduled action (Daily, Weekly, Monthly, Yearly, Custom)"""
  Type: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Tracks the schemas in the system and the ID ranges that are valid for entities within each schema.
"""
type SchemaInfo_ {
  Comments: String
  EntityIDMax: Int!
  EntityIDMin: Int!
  ID: String!
  SchemaName: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
A hierarchical list of possible skills that are linked to Employees and can also be linked to any other entity
"""
type Skill_ {
  EmployeeSkillsArray: [EmployeeSkill_!]!
  ID: String!
  Name: String!
  Parent: String
  ParentID: String
  SkillsArray: [Skill_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
The phase of the respons: clarifying_question, data_request, or analysis_complete
"""
enum SkipResponsePhase {
  AnalysisComplete
  ClarifyingQuestion
  DataRequest
}

type Subscription {
  colorSubscription: ColorNotification!
  statusUpdates(sessionId: String!): PushStatusNotification!
}

"""
Tags are used to arbitrarily associate any record in any entity with addtional information.
"""
type Tag_ {
  Description: String
  DisplayName: String!
  ID: String!
  Name: String!
  Parent: String
  ParentID: String
  TaggedItemsArray: [TaggedItem_!]!
  TagsArray: [Tag_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Tracks the links between any record in any entity with Tags"""
type TaggedItem_ {
  Entity: String!
  EntityID: String!
  ID: String!
  RecordID: String!
  Tag: String!
  TagID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Template categories for organizing templates"""
type TemplateCategory_ {
  """Description of the template category"""
  Description: String
  ID: String!

  """Name of the template category"""
  Name: String!
  Parent: String
  ParentID: String
  TemplateCategoriesArray: [TemplateCategory_!]!
  TemplatesArray: [Template_!]!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Template content types for categorizing content within templates"""
type TemplateContentType_ {
  """
  Refers to the primary language or codetype of the templates of this type, HTML, JSON, JavaScript, etc
  """
  CodeType: String!

  """Description of the template content type"""
  Description: String
  ID: String!

  """Name of the template content type"""
  Name: String!
  TemplateContentsArray: [TemplateContent_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Template content for different versions of a template for purposes like HTML/Text/etc
"""
type TemplateContent_ {
  ID: String!

  """
  Indicates whether the content is active or not. Use this to disable a particular Template Content item without having to remove it
  """
  IsActive: Boolean!

  """
  Priority of the content version, higher priority versions will be used ahead of lower priority versions for a given Type
  """
  Priority: Int!
  Template: String!
  TemplateID: String!

  """The actual text content for the template"""
  TemplateText: String
  Type: String!
  TypeID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

input TemplateInputType {
  ActiveAt: Timestamp
  Category: String
  CategoryID: Float
  Description: String!
  DisabledAt: Timestamp
  ID: Float!
  IsActive: Boolean!
  Name: String!
  User: String
  UserID: Float!
  UserPrompt: String
  _mj_CreatedAt: Timestamp!
  _mj_UpdatedAt: Timestamp!
}

"""Parameters allowed for use inside the template"""
type TemplateParam_ {
  """Default value of the parameter"""
  DefaultValue: String

  """Description of the parameter"""
  Description: String
  Entity: String
  EntityID: String

  """
  Only used when Type = Entity, used to specify an optional filter to reduce the set of rows that are returned for each of the templates being rendered.
  """
  ExtraFilter: String
  ID: String!
  IsRequired: Boolean!

  """
  If the LinkedParameterName is specified, this is an optional setting to specify the field within the LinkedParameter that will be used for filtering. This is only needed if there is more than one foreign key relationship between the Entity parameter and the Linked parameter, or if there is no defined foreign key in the database between the two entities.
  """
  LinkedParameterField: String

  """
  Only used when Type=Entity, this is used to link an Entity parameter with another parameter so that the rows in the Entity parameter can be filtered automatically based on the FKEY relationship between the Record and this Entity parameter. For example, if the Entity-based parameter is for an entity like Activities and there is another parameter of type Record for an entity like Contacts, in that situation the Activities Parameter would point to the Contacts parameter as the LinkedParameterName because we would filter down the Activities in each template render to only those linked to the Contact.
  """
  LinkedParameterName: String

  """Name of the parameter"""
  Name: String!

  """
  Record ID, used only when Type is Record and a specific hardcoded record ID is desired, this is an uncommon use case, helpful for pulling in static types and metadata in some cases.
  """
  RecordID: String
  Template: String!
  TemplateID: String!

  """
  Type of the parameter - Record is an individual record within the entity specified by EntityID. Entity means an entire Entity or an entity filtered by the LinkedParameterName/Field attributes and/or ExtraFilter. Object is any valid JSON object. Array and Scalar have their common meanings.
  """
  Type: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Templates are used for dynamic expansion of a static template with data from a given context. Templates can be used to create documents, messages and anything else that requires dynamic document creation merging together static text, data and lightweight logic
"""
type Template_ {
  """
  Optional, if provided, this template will not be available for use until the specified date. Requires IsActive to be set to 1
  """
  ActiveAt: Timestamp
  Category: String
  CategoryID: String

  """Description of the template"""
  Description: String

  """
  Optional, if provided, this template will not be available for use after the specified date. If IsActive=0, this has no effect.
  """
  DisabledAt: Timestamp
  EntityDocumentsArray: [EntityDocument_!]!
  ID: String!

  """
  If set to 0, the template will be disabled regardless of the values in ActiveAt/DisabledAt. 
  """
  IsActive: Boolean!

  """Name of the template"""
  Name: String!
  TemplateContentsArray: [TemplateContent_!]!
  TemplateParamsArray: [TemplateParam_!]!
  User: String!
  UserID: String!

  """
  This prompt will be used by the AI to generate template content as requested by the user.
  """
  UserPrompt: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateAIActionInput {
  DefaultModelID: String
  DefaultPrompt: String
  Description: String
  ID: String!
  IsActive: Boolean!
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateAIModelActionInput {
  AIActionID: String!
  AIModelID: String!
  ID: String!
  IsActive: Boolean!
  OldValues___: [KeyValuePairInput!]
}

input UpdateAIModelInput {
  AIModelTypeID: String!
  APIName: String
  Description: String
  DriverClass: String
  DriverImportPath: String
  ID: String!
  IsActive: Boolean!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  PowerRank: Int
  Vendor: String
}

input UpdateAIModelTypeInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateActionAuthorizationInput {
  ActionID: String!
  AuthorizationID: String!
  Comments: String
  ID: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateActionCategoryInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ParentID: String
  Status: String!
}

input UpdateActionContextInput {
  ActionID: String!
  ContextTypeID: String
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Status: String!
}

input UpdateActionContextTypeInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateActionExecutionLogInput {
  ActionID: String!
  EndedAt: Timestamp
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Params: String
  ResultCode: String
  RetentionPeriod: Int
  StartedAt: Timestamp!
  UserID: String!
}

input UpdateActionFilterInput {
  Code: String!
  CodeExplanation: String
  ID: String!
  OldValues___: [KeyValuePairInput!]
  UserComments: String
  UserDescription: String!
}

input UpdateActionInput {
  CategoryID: String
  Code: String
  CodeApprovalComments: String
  CodeApprovalStatus: String!
  CodeApprovedAt: Timestamp
  CodeApprovedByUserID: String
  CodeComments: String
  CodeLocked: Boolean!
  Description: String
  ForceCodeGeneration: Boolean!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  RetentionPeriod: Int
  Status: String!
  Type: String!
  UserComments: String
  UserPrompt: String
}

input UpdateActionLibraryInput {
  ActionID: String!
  ID: String!
  ItemsUsed: String
  LibraryID: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateActionParamInput {
  ActionID: String!
  DefaultValue: String
  Description: String
  ID: String!
  IsArray: Boolean!
  IsRequired: Boolean!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Type: String!
  ValueType: String!
}

input UpdateActionResultCodeInput {
  ActionID: String!
  Description: String
  ID: String!
  IsSuccess: Boolean!
  OldValues___: [KeyValuePairInput!]
  ResultCode: String!
}

input UpdateApplicationEntityInput {
  ApplicationID: String!
  DefaultForNewUser: Boolean!
  EntityID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Sequence: Int!
}

input UpdateApplicationInput {
  DefaultForNewUser: Boolean!
  Description: String
  ID: String!
  Icon: String
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateApplicationSettingInput {
  ApplicationID: String!
  Comments: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Value: String!
}

input UpdateAuditLogInput {
  AuditLogTypeID: String!
  AuthorizationID: String
  Description: String
  Details: String
  EntityID: String
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RecordID: String
  Status: String!
  UserID: String!
}

input UpdateCommunicationBaseMessageTypeInput {
  ID: String!
  MaxBytes: Int
  OldValues___: [KeyValuePairInput!]
  SupportsAttachments: Boolean!
  SupportsHtml: Boolean!
  SupportsSubjectLine: Boolean!
  Type: String!
}

input UpdateCommunicationLogInput {
  CommunicationProviderID: String!
  CommunicationProviderMessageTypeID: String!
  CommunicationRunID: String
  Direction: String!
  ErrorMessage: String
  ID: String!
  MessageContent: String
  MessageDate: Timestamp!
  OldValues___: [KeyValuePairInput!]
  Status: String!
}

input UpdateCommunicationProviderInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Status: String!
  SupportsReceiving: Boolean!
  SupportsSending: Boolean!
}

input UpdateCommunicationProviderMessageTypeInput {
  AdditionalAttributes: String
  CommunicationBaseMessageTypeID: String!
  CommunicationProviderID: String!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Status: String!
}

input UpdateCommunicationRunInput {
  Comments: String
  Direction: String!
  EndedAt: Timestamp
  ErrorMessage: String
  ID: String!
  OldValues___: [KeyValuePairInput!]
  StartedAt: Timestamp
  Status: String!
  UserID: String!
}

input UpdateCompanyInput {
  Description: String!
  Domain: String
  ID: String!
  LogoURL: String
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Website: String
}

input UpdateCompanyIntegrationInput {
  APIKey: String
  AccessToken: String
  ClientID: String
  ClientSecret: String
  CompanyID: String!
  CustomAttribute1: String
  ExternalSystemID: String
  ID: String!
  IntegrationID: String!
  IsActive: Boolean
  IsExternalSystemReadOnly: Boolean!
  OldValues___: [KeyValuePairInput!]
  RefreshToken: String
  TokenExpirationDate: Timestamp
}

input UpdateCompanyIntegrationRecordMapInput {
  CompanyIntegrationID: String!
  EntityID: String!
  EntityRecordID: String!
  ExternalSystemRecordID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateCompanyIntegrationRunAPILogInput {
  CompanyIntegrationRunID: String!
  ExecutedAt: Timestamp!
  ID: String!
  IsSuccess: Boolean!
  OldValues___: [KeyValuePairInput!]
  Parameters: String
  RequestMethod: String
  URL: String
}

input UpdateCompanyIntegrationRunDetailInput {
  Action: String!
  CompanyIntegrationRunID: String!
  EntityID: String!
  ExecutedAt: Timestamp!
  ID: String!
  IsSuccess: Boolean!
  OldValues___: [KeyValuePairInput!]
  RecordID: String!
}

input UpdateCompanyIntegrationRunInput {
  Comments: String
  CompanyIntegrationID: String!
  EndedAt: Timestamp
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RunByUserID: String!
  StartedAt: Timestamp
  TotalRecords: Int!
}

input UpdateConversationDetailInput {
  ConversationID: String!
  Error: String
  ExternalID: String
  HiddenToUser: Boolean!
  ID: String!
  Message: String!
  OldValues___: [KeyValuePairInput!]
  Role: String!
}

input UpdateConversationInput {
  DataContextID: String
  Description: String
  ExternalID: String
  ID: String!
  IsArchived: Boolean!
  LinkedEntityID: String
  LinkedRecordID: String
  Name: String
  OldValues___: [KeyValuePairInput!]
  Type: String!
  UserID: String!
}

input UpdateDashboardCategoryInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ParentID: String
  UserID: String!
}

input UpdateDashboardInput {
  CategoryID: String
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  UIConfigDetails: String!
  UserID: String!
}

input UpdateDataContextInput {
  Description: String
  ID: String!
  LastRefreshedAt: Timestamp
  Name: String!
  OldValues___: [KeyValuePairInput!]
  UserID: String!
}

input UpdateDataContextItemInput {
  DataContextID: String!
  DataJSON: String
  EntityID: String
  ID: String!
  LastRefreshedAt: Timestamp
  OldValues___: [KeyValuePairInput!]
  QueryID: String
  RecordID: String
  SQL: String
  Type: String!
  ViewID: String
}

input UpdateDuplicateRunDetailInput {
  DuplicateRunID: String!
  ID: String!
  MatchErrorMessage: String
  MatchStatus: String!
  MergeErrorMessage: String
  MergeStatus: String!
  OldValues___: [KeyValuePairInput!]
  RecordID: String!
  SkippedReason: String
}

input UpdateDuplicateRunDetailMatchInput {
  Action: String!
  ApprovalStatus: String!
  DuplicateRunDetailID: String!
  ID: String!
  MatchProbability: Float!
  MatchRecordID: String!
  MatchSource: String!
  MatchedAt: Timestamp!
  MergeStatus: String!
  MergedAt: Timestamp!
  OldValues___: [KeyValuePairInput!]
  RecordMergeLogID: String
}

input UpdateDuplicateRunInput {
  ApprovalComments: String
  ApprovalStatus: String!
  ApprovedByUserID: String
  EndedAt: Timestamp
  EntityID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  ProcessingErrorMessage: String
  ProcessingStatus: String!
  SourceListID: String!
  StartedAt: Timestamp!
  StartedByUserID: String!
}

input UpdateEmployeeCompanyIntegrationInput {
  CompanyIntegrationID: String!
  EmployeeID: String!
  ExternalSystemRecordID: String!
  ID: String!
  IsActive: Boolean!
  OldValues___: [KeyValuePairInput!]
}

input UpdateEmployeeInput {
  Active: Boolean!
  CompanyID: String!
  Email: String!
  FirstName: String!
  ID: String!
  LastName: String!
  OldValues___: [KeyValuePairInput!]
  Phone: String
  SupervisorID: String
  Title: String
}

input UpdateEmployeeRoleInput {
  EmployeeID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RoleID: String!
}

input UpdateEmployeeSkillInput {
  EmployeeID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  SkillID: String!
}

input UpdateEntityAIActionInput {
  AIActionID: String!
  AIModelID: String!
  Comments: String
  EntityID: String!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  OutputEntityID: String
  OutputField: String
  OutputType: String!
  Prompt: String
  SkipIfOutputFieldNotEmpty: Boolean!
  TriggerEvent: String!
  UserMessage: String!
}

input UpdateEntityActionFilterInput {
  ActionFilterID: String!
  EntityActionID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Sequence: Int!
  Status: String!
}

input UpdateEntityActionInput {
  ActionID: String!
  EntityID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Status: String!
}

input UpdateEntityActionInvocationInput {
  EntityActionID: String!
  ID: String!
  InvocationTypeID: String!
  OldValues___: [KeyValuePairInput!]
  Status: String!
}

input UpdateEntityActionInvocationTypeInput {
  Description: String
  DisplaySequence: Int!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateEntityActionParamInput {
  ActionParamID: String!
  Comments: String
  EntityActionID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Value: String
  ValueType: String!
}

input UpdateEntityCommunicationFieldInput {
  EntityCommunicationMessageTypeID: String!
  FieldName: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Priority: Int!
}

input UpdateEntityCommunicationMessageTypeInput {
  BaseMessageTypeID: String!
  EntityID: String!
  ID: String!
  IsActive: Boolean!
  OldValues___: [KeyValuePairInput!]
}

input UpdateEntityDocumentInput {
  AIModelID: String!
  AbsoluteMatchThreshold: Float!
  EntityID: String!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  PotentialMatchThreshold: Float!
  Status: String!
  TemplateID: String!
  TypeID: String!
  VectorDatabaseID: String!
}

input UpdateEntityDocumentRunInput {
  EndedAt: Timestamp
  EntityDocumentID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  StartedAt: Timestamp
  Status: String!
}

input UpdateEntityDocumentSettingInput {
  Comments: String
  EntityDocumentID: String!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Value: String!
}

input UpdateEntityDocumentTypeInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateEntityFieldInput {
  AllowUpdateAPI: Boolean!
  AllowUpdateInView: Boolean!
  AutoUpdateDescription: Boolean!
  Category: String
  CodeType: String
  DefaultColumnWidth: Int
  DefaultInView: Boolean!
  Description: String
  DisplayName: String
  EntityIDFieldName: String
  ExtendedType: String
  FullTextSearchEnabled: Boolean!
  GeneratedFormSection: String!
  ID: String!
  IncludeInGeneratedForm: Boolean!
  IncludeInUserSearchAPI: Boolean!
  IncludeRelatedEntityNameFieldInBaseView: Boolean!
  IsNameField: Boolean!
  IsPrimaryKey: Boolean!
  IsUnique: Boolean!
  OldValues___: [KeyValuePairInput!]
  RelatedEntityDisplayType: String!
  RelatedEntityFieldName: String
  RelatedEntityID: String
  RelatedEntityNameFieldMap: String
  UserSearchParamFormatAPI: String
  ValueListType: String!
  ViewCellTemplate: String
}

input UpdateEntityFieldValueInput {
  Code: String
  Description: String
  EntityFieldID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Sequence: Int!
  Value: String!
}

input UpdateEntityInput {
  AllowAllRowsAPI: Boolean!
  AllowCreateAPI: Boolean!
  AllowDeleteAPI: Boolean!
  AllowRecordMerge: Boolean!
  AllowUpdateAPI: Boolean!
  AllowUserSearchAPI: Boolean!
  AuditRecordAccess: Boolean!
  AuditViewRuns: Boolean!
  AutoUpdateDescription: Boolean!
  BaseView: String!
  BaseViewGenerated: Boolean!
  CascadeDeletes: Boolean!
  CustomResolverAPI: Boolean!
  DeleteType: String!
  Description: String
  EntityObjectSubclassImport: String
  EntityObjectSubclassName: String
  FullTextCatalog: String
  FullTextCatalogGenerated: Boolean!
  FullTextIndex: String
  FullTextIndexGenerated: Boolean!
  FullTextSearchEnabled: Boolean!
  FullTextSearchFunction: String
  FullTextSearchFunctionGenerated: Boolean!
  ID: String!
  Icon: String
  IncludeInAPI: Boolean!
  Name: String!
  NameSuffix: String
  OldValues___: [KeyValuePairInput!]
  ParentID: String
  PreferredCommunicationField: String
  RelationshipDefaultDisplayType: String!
  TrackRecordChanges: Boolean!
  UserFormGenerated: Boolean!
  UserViewMaxRows: Int
  VirtualEntity: Boolean!
  spCreate: String
  spCreateGenerated: Boolean!
  spDelete: String
  spDeleteGenerated: Boolean!
  spMatch: String
  spUpdate: String
  spUpdateGenerated: Boolean!
}

input UpdateEntityPermissionInput {
  CanCreate: Boolean!
  CanDelete: Boolean!
  CanRead: Boolean!
  CanUpdate: Boolean!
  CreateRLSFilterID: String
  DeleteRLSFilterID: String
  EntityID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  ReadRLSFilterID: String
  RoleID: String!
  UpdateRLSFilterID: String
}

input UpdateEntityRecordDocumentInput {
  DocumentText: String
  EntityDocumentID: String!
  EntityID: String!
  EntityRecordUpdatedAt: Timestamp!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RecordID: String!
  VectorID: String
  VectorIndexID: String!
  VectorJSON: String
}

input UpdateEntityRelationshipDisplayComponentInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  RelationshipType: String!
}

input UpdateEntityRelationshipInput {
  BundleInAPI: Boolean!
  DisplayComponentConfiguration: String
  DisplayComponentID: String
  DisplayIcon: String
  DisplayIconType: String!
  DisplayInForm: Boolean!
  DisplayLocation: String!
  DisplayName: String
  EntityID: String!
  EntityKeyField: String
  ID: String!
  IncludeInParentAllQuery: Boolean!
  JoinEntityInverseJoinField: String
  JoinEntityJoinField: String
  JoinView: String
  OldValues___: [KeyValuePairInput!]
  RelatedEntityID: String!
  RelatedEntityJoinField: String!
  Sequence: Int!
  Type: String!
}

input UpdateEntitySettingInput {
  Comments: String
  EntityID: String!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Value: String!
}

input UpdateErrorLogInput {
  Category: String
  Code: String
  CompanyIntegrationRunDetailID: String
  CompanyIntegrationRunID: String
  CreatedBy: String
  Details: String
  ID: String!
  Message: String
  OldValues___: [KeyValuePairInput!]
  Status: String
}

input UpdateExplorerNavigationItemInput {
  Comments: String
  Description: String
  ID: String!
  IconCSSClass: String
  IsActive: Boolean!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Route: String!
  Sequence: Int!
  ShowInHomeScreen: Boolean!
  ShowInNavigationDrawer: Boolean!
}

input UpdateFileCategoryInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ParentID: String
}

input UpdateFileEntityRecordLinkInput {
  EntityID: String!
  FileID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RecordID: String!
}

input UpdateFileInput {
  CategoryID: String
  ContentType: String
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ProviderID: String!
  ProviderKey: String
  Status: String!
}

input UpdateFileStorageProviderInput {
  ClientDriverKey: String!
  Description: String
  ID: String!
  IsActive: Boolean!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Priority: Int!
  ServerDriverKey: String!
}

input UpdateIntegrationInput {
  BatchMaxRequestCount: Int!
  BatchRequestWaitTime: Int!
  ClassName: String
  Description: String
  ID: String!
  ImportPath: String
  Name: String!
  NavigationBaseURL: String
  OldValues___: [KeyValuePairInput!]
}

input UpdateIntegrationURLFormatInput {
  Comments: String
  EntityID: String!
  ID: String!
  IntegrationID: String!
  OldValues___: [KeyValuePairInput!]
  URLFormat: String!
}

input UpdateLibraryInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  SampleCode: String
  Status: String!
  TypeDefinitions: String
}

input UpdateLibraryItemInput {
  ID: String!
  LibraryID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Type: String!
}

input UpdateListCategoryInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ParentID: String
  UserID: String!
}

input UpdateListDetailInput {
  ID: String!
  ListID: String!
  OldValues___: [KeyValuePairInput!]
  RecordID: String!
  Sequence: Int!
}

input UpdateListInput {
  CategoryID: String
  CompanyIntegrationID: String
  Description: String
  EntityID: String!
  ExternalSystemRecordID: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  UserID: String!
}

input UpdateQueryCategoryInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ParentID: String
  UserID: String!
}

input UpdateQueryFieldInput {
  ComputationDescription: String
  Description: String
  ID: String!
  IsComputed: Boolean!
  IsSummary: Boolean!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  QueryID: String!
  SQLBaseType: String!
  SQLFullType: String!
  Sequence: Int!
  SourceEntityID: String
  SourceFieldName: String
  SummaryDescription: String
}

input UpdateQueryInput {
  CategoryID: String
  Description: String
  ExecutionCostRank: Int
  Feedback: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  OriginalSQL: String
  QualityRank: Int
  SQL: String
  Status: String!
  TechnicalDescription: String
  UserQuestion: String
}

input UpdateQueryPermissionInput {
  ID: String!
  OldValues___: [KeyValuePairInput!]
  QueryID: String!
  RoleID: String!
}

input UpdateQueueInput {
  Description: String
  ID: String!
  IsActive: Boolean!
  LastHeartbeat: Timestamp!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ProcessCwd: String
  ProcessHostName: String
  ProcessIPAddress: String
  ProcessMacAddress: String
  ProcessOSName: String
  ProcessOSVersion: String
  ProcessPID: Int
  ProcessPlatform: String
  ProcessUserID: String
  ProcessUserName: String
  ProcessVersion: String
  QueueTypeID: String!
}

input UpdateQueueTaskInput {
  Comments: String
  Data: String
  EndedAt: Timestamp
  ErrorMessage: String
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Options: String
  Output: String
  QueueID: String!
  StartedAt: Timestamp
  Status: String!
}

input UpdateRecommendationInput {
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RecommendationRunID: String!
  SourceEntityID: String!
  SourceEntityRecordID: String!
}

input UpdateRecommendationItemInput {
  DestinationEntityID: String!
  DestinationEntityRecordID: String!
  ID: String!
  MatchProbability: Float
  OldValues___: [KeyValuePairInput!]
  RecommendationID: String!
}

input UpdateRecommendationProviderInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateRecommendationRunInput {
  Description: String
  EndDate: Timestamp
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RecommendationProviderID: String!
  RunByUserID: String!
  StartDate: Timestamp!
  Status: String!
}

input UpdateRecordChangeInput {
  ChangedAt: Timestamp!
  ChangesDescription: String!
  ChangesJSON: String!
  Comments: String
  EntityID: String!
  ErrorLog: String
  FullRecordJSON: String!
  ID: String!
  IntegrationID: String
  OldValues___: [KeyValuePairInput!]
  RecordID: String!
  ReplayRunID: String
  Source: String!
  Status: String!
  Type: String!
  UserID: String!
}

input UpdateRecordChangeReplayRunInput {
  EndedAt: Timestamp
  ID: String!
  OldValues___: [KeyValuePairInput!]
  StartedAt: Timestamp!
  Status: String!
  UserID: String!
}

input UpdateRecordMergeDeletionLogInput {
  DeletedRecordID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  ProcessingLog: String
  RecordMergeLogID: String!
  Status: String!
}

input UpdateRecordMergeLogInput {
  ApprovalStatus: String!
  ApprovedByUserID: String
  Comments: String
  EntityID: String!
  ID: String!
  InitiatedByUserID: String!
  OldValues___: [KeyValuePairInput!]
  ProcessingEndedAt: Timestamp
  ProcessingLog: String
  ProcessingStartedAt: Timestamp!
  ProcessingStatus: String!
  SurvivingRecordID: String!
}

input UpdateReportCategoryInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ParentID: String
  UserID: String!
}

input UpdateReportInput {
  CategoryID: String
  Configuration: String
  ConversationDetailID: String
  ConversationID: String
  DataContextID: String
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  OutputDeliveryTypeID: String
  OutputFormatTypeID: String
  OutputFrequency: String
  OutputTargetEmail: String
  OutputTriggerTypeID: String
  OutputWorkflowID: String
  SharingScope: String!
  UserID: String!
}

input UpdateReportSnapshotInput {
  ID: String!
  OldValues___: [KeyValuePairInput!]
  ReportID: String!
  ResultSet: String!
  UserID: String!
}

input UpdateRoleInput {
  Description: String
  DirectoryID: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  SQLName: String
}

input UpdateScheduledActionInput {
  ActionID: String!
  CreatedByUserID: String!
  CronExpression: String
  CustomCronExpression: String
  DayOfMonth: Int
  DayOfWeek: String
  Description: String
  ID: String!
  IntervalDays: Int
  Month: String
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Status: String!
  Timezone: String!
  Type: String!
}

input UpdateScheduledActionParamInput {
  ActionParamID: String!
  Comments: String
  ID: String!
  OldValues___: [KeyValuePairInput!]
  ScheduledActionID: String!
  Value: String
  ValueType: String!
}

input UpdateSchemaInfoInput {
  Comments: String
  EntityIDMax: Int!
  EntityIDMin: Int!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  SchemaName: String!
}

input UpdateTemplateCategoryInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ParentID: String
  UserID: String!
}

input UpdateTemplateContentInput {
  ID: String!
  IsActive: Boolean!
  OldValues___: [KeyValuePairInput!]
  Priority: Int!
  TemplateID: String!
  TemplateText: String
  TypeID: String!
}

input UpdateTemplateContentTypeInput {
  CodeType: String!
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateTemplateInput {
  ActiveAt: Timestamp
  CategoryID: String
  Description: String
  DisabledAt: Timestamp
  ID: String!
  IsActive: Boolean!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  UserID: String!
  UserPrompt: String
}

input UpdateTemplateParamInput {
  DefaultValue: String
  Description: String
  EntityID: String
  ExtraFilter: String
  ID: String!
  IsRequired: Boolean!
  LinkedParameterField: String
  LinkedParameterName: String
  Name: String!
  OldValues___: [KeyValuePairInput!]
  RecordID: String
  TemplateID: String!
  Type: String!
}

input UpdateUserApplicationEntityInput {
  EntityID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Sequence: Int!
  UserApplicationID: String!
}

input UpdateUserApplicationInput {
  ApplicationID: String!
  ID: String!
  IsActive: Boolean!
  OldValues___: [KeyValuePairInput!]
  Sequence: Int!
  UserID: String!
}

input UpdateUserFavoriteInput {
  EntityID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RecordID: String!
  UserID: String!
}

input UpdateUserInput {
  Email: String!
  EmployeeID: String
  FirstName: String
  ID: String!
  IsActive: Boolean!
  LastName: String
  LinkedEntityID: String
  LinkedEntityRecordID: String
  LinkedRecordType: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  Title: String
  Type: String!
}

input UpdateUserNotificationInput {
  ID: String!
  Message: String
  OldValues___: [KeyValuePairInput!]
  ReadAt: Timestamp
  ResourceConfiguration: String
  ResourceRecordID: String
  ResourceTypeID: String
  Title: String
  Unread: Boolean!
  UserID: String!
}

input UpdateUserRecordLogInput {
  EarliestAt: Timestamp!
  EntityID: String!
  ID: String!
  LatestAt: Timestamp!
  OldValues___: [KeyValuePairInput!]
  RecordID: String!
  TotalCount: Int!
  UserID: String!
}

input UpdateUserViewCategoryInput {
  Description: String
  EntityID: String!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ParentID: String
  UserID: String!
}

input UpdateUserViewInput {
  CategoryID: String
  CustomFilterState: Boolean!
  CustomWhereClause: Boolean!
  Description: String
  EntityID: String!
  FilterState: String
  GridState: String
  ID: String!
  IsDefault: Boolean!
  IsShared: Boolean!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  SmartFilterEnabled: Boolean!
  SmartFilterExplanation: String
  SmartFilterPrompt: String
  SmartFilterWhereClause: String
  SortState: String
  UserID: String!
  WhereClause: String
}

input UpdateUserViewRunDetailInput {
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RecordID: String!
  UserViewRunID: String!
}

input UpdateUserViewRunInput {
  ID: String!
  OldValues___: [KeyValuePairInput!]
  RunAt: Timestamp!
  RunByUserID: String!
  UserViewID: String!
}

input UpdateVectorDatabaseInput {
  ClassKey: String
  DefaultURL: String
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateVectorIndexInput {
  Description: String
  EmbeddingModelID: String!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  VectorDatabaseID: String!
}

input UpdateVersionInstallationInput {
  Comments: String
  ID: String!
  InstallLog: String
  InstalledAt: Timestamp!
  MajorVersion: Int!
  MinorVersion: Int!
  OldValues___: [KeyValuePairInput!]
  PatchVersion: Int!
  Status: String!
  Type: String
}

input UpdateWorkflowEngineInput {
  Description: String
  DriverClass: String!
  DriverPath: String!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
}

input UpdateWorkflowInput {
  AutoRunEnabled: Boolean!
  AutoRunInterval: Int
  AutoRunIntervalUnits: String
  Description: String
  ExternalSystemRecordID: String!
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  SubclassName: String
  WorkflowEngineID: String!
}

input UpdateWorkflowRunInput {
  EndedAt: Timestamp
  ExternalSystemRecordID: String!
  ID: String!
  OldValues___: [KeyValuePairInput!]
  Results: String
  StartedAt: Timestamp!
  Status: String!
  WorkflowID: String!
}

input UpdateWorkspaceInput {
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  UserID: String!
}

input UpdateWorkspaceItemInput {
  Configuration: String
  Description: String
  ID: String!
  Name: String!
  OldValues___: [KeyValuePairInput!]
  ResourceRecordID: String
  ResourceTypeID: String!
  Sequence: Int!
  WorkspaceID: String!
}

input Updateflyway_schema_historyInput {
  OldValues___: [KeyValuePairInput!]
  checksum: Int
  description: String
  execution_time: Int!
  installed_by: String!
  installed_on: Timestamp!
  installed_rank: Int!
  script: String!
  success: Boolean!
  type: String!
  version: String
}

type UserApplicationEntity_ {
  Application: String!
  Entity: String!
  EntityID: String!
  ID: String!
  Sequence: Int!
  User: String!
  UserApplicationID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type UserApplication_ {
  Application: String!
  ApplicationID: String!
  ID: String!
  IsActive: Boolean!
  Sequence: Int!
  User: String!
  UserApplicationEntitiesArray: [UserApplicationEntity_!]!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type UserFavoriteResult {
  CompositeKey: CompositeKeyOutputType!
  EntityID: Int!
  IsFavorite: Boolean!
  Success: Boolean!
  UserID: Int!
}

input UserFavoriteSearchParams {
  CompositeKey: CompositeKeyInputType!
  EntityID: String!
  UserID: String!
}

input UserFavoriteSetParams {
  CompositeKey: CompositeKeyInputType!
  EntityID: String!
  IsFavorite: Boolean!
  UserID: String!
}

"""Records that each user can mark as a favorite for easy access"""
type UserFavorite_ {
  Entity: String!
  EntityBaseTable: String!
  EntityBaseView: String!
  EntityID: String!
  ID: String!
  RecordID: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type UserNotification_ {
  ID: String!
  Message: String
  ReadAt: Timestamp
  ResourceConfiguration: String
  ResourceRecordID: String
  ResourceType: String
  ResourceTypeID: String
  Title: String
  Unread: Boolean!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type UserRecordLog_ {
  EarliestAt: Timestamp!
  Entity: String!
  EntityID: String!
  ID: String!
  LatestAt: Timestamp!
  RecordID: String!
  TotalCount: Int!
  UserEmail: String!
  UserFirstLast: String
  UserID: String!
  UserName: String!
  UserSupervisor: String
  UserSupervisorEmail: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type UserRole_ {
  ID: String!
  Role: String!
  RoleID: String!
  User: String!
  UserID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type UserViewCategory_ {
  Description: String
  Entity: String!
  EntityID: String!
  ID: String!
  Name: String!
  Parent: String
  ParentID: String
  User: String!
  UserID: String!
  UserViewCategoriesArray: [UserViewCategory_!]!
  UserViewsArray: [UserView_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Tracks the set of records that were included in each run of a given user view.
"""
type UserViewRunDetail_ {
  EntityID: String!
  ID: String!
  RecordID: String!
  UserViewID: String!
  UserViewRunID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
User Views can be logged when run to capture the date and user that ran the view as well as the output results.
"""
type UserViewRun_ {
  ID: String!
  RunAt: Timestamp!
  RunByUser: String!
  RunByUserID: String!
  UserView: String!
  UserViewID: String!
  UserViewRunDetailsArray: [UserViewRunDetail_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""
Views are sets of records within a given entity defined by filtering rules. Views can be used programatically to retrieve dynamic sets of data and in user interfaces like MJ Explorer for end-user consumption.
"""
type UserView_ {
  CategoryID: String
  CustomFilterState: Boolean!
  CustomWhereClause: Boolean!
  DataContextItemsArray: [DataContextItem_!]!
  Description: String
  Entity: String!
  EntityBaseView: String!
  EntityID: String!
  EntityRelationshipsArray: [EntityRelationship_!]!
  FilterState: String
  GridState: String
  ID: String!
  IsDefault: Boolean!
  IsShared: Boolean!
  Name: String!
  SmartFilterEnabled: Boolean!
  SmartFilterExplanation: String
  SmartFilterPrompt: String
  SmartFilterWhereClause: String
  SortState: String
  UserEmail: String!
  UserFirstLast: String
  UserID: String!
  UserName: String!
  UserType: String!
  UserViewRunsArray: [UserViewRun_!]!
  WhereClause: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""A list of all users who have or had access to the system"""
type User_ {
  ActionExecutionLogsArray: [ActionExecutionLog_!]!
  ActionsArray: [Action_!]!
  AuditLogsArray: [AuditLog_!]!
  CommunicationRunsArray: [CommunicationRun_!]!
  CompanyIntegrationRunsArray: [CompanyIntegrationRun_!]!
  ConversationsArray: [Conversation_!]!
  DashboardCategoriesArray: [DashboardCategory_!]!
  DashboardsArray: [Dashboard_!]!
  DataContextsArray: [DataContext_!]!
  DuplicateRunsArray: [DuplicateRun_!]!
  Email: String!
  EmployeeEmail: String
  EmployeeFirstLast: String
  EmployeeID: String
  EmployeeSupervisor: String
  EmployeeSupervisorEmail: String
  EmployeeTitle: String
  FirstLast: String
  FirstName: String
  ID: String!
  IsActive: Boolean!
  LastName: String
  LinkedEntityID: String
  LinkedEntityRecordID: String
  LinkedRecordType: String!
  ListCategoriesArray: [ListCategory_!]!
  ListsArray: [List_!]!
  Name: String!
  QueryCategoriesArray: [QueryCategory_!]!
  RecommendationRunsArray: [RecommendationRun_!]!
  RecordChangeReplayRunsArray: [RecordChangeReplayRun_!]!
  RecordChangesArray: [RecordChange_!]!
  RecordMergeLogsArray: [RecordMergeLog_!]!
  ReportCategoriesArray: [ReportCategory_!]!
  ReportSnapshotsArray: [ReportSnapshot_!]!
  ReportsArray: [Report_!]!
  ScheduledActionsArray: [ScheduledAction_!]!
  TemplateCategoriesArray: [TemplateCategory_!]!
  TemplatesArray: [Template_!]!
  Title: String
  Type: String!
  UserApplicationsArray: [UserApplication_!]!
  UserFavoritesArray: [UserFavorite_!]!
  UserNotificationsArray: [UserNotification_!]!
  UserRecordLogsArray: [UserRecordLog_!]!
  UserRolesArray: [UserRole_!]!
  UserViewCategoriesArray: [UserViewCategory_!]!
  UserViewRunsArray: [UserViewRun_!]!
  UserViewsArray: [UserView_!]!
  WorkspacesArray: [Workspace_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type VectorDatabase_ {
  ClassKey: String
  DefaultURL: String
  Description: String
  EntityDocumentsArray: [EntityDocument_!]!
  ID: String!
  Name: String!
  VectorIndexesArray: [VectorIndex_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type VectorIndex_ {
  Description: String
  EmbeddingModel: String!
  EmbeddingModelID: String!
  EntityRecordDocumentsArray: [EntityRecordDocument_!]!
  ID: String!
  Name: String!
  VectorDatabase: String!
  VectorDatabaseID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type VersionInstallation_ {
  """
  Optional, comments the administrator wants to save for each installed version
  """
  Comments: String
  CompleteVersion: String
  ID: String!

  """Any logging that was saved from the installation process"""
  InstallLog: String
  InstalledAt: Timestamp!
  MajorVersion: Int!
  MinorVersion: Int!
  PatchVersion: Int!

  """Pending, Complete, Failed"""
  Status: String!

  """What type of installation was applied"""
  Type: String
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type WorkflowEngine_ {
  Description: String
  DriverClass: String!
  DriverPath: String!
  ID: String!
  Name: String!
  WorkflowsArray: [Workflow_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type WorkflowRun_ {
  EndedAt: Timestamp
  ExternalSystemRecordID: String!
  ID: String!
  Results: String
  StartedAt: Timestamp!
  Status: String!
  Workflow: String!
  WorkflowEngineName: String!
  WorkflowID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type Workflow_ {
  """
  If set to 1, the workflow will be run automatically on the interval specified by the AutoRunIntervalType and AutoRunInterval fields
  """
  AutoRunEnabled: Boolean!

  """
  The interval, denominated in the units specified in the AutoRunIntervalUnits column, between auto runs of this workflow.
  """
  AutoRunInterval: Int
  AutoRunIntervalMinutes: Int

  """Minutes, Hours, Days, Weeks, Months, Years"""
  AutoRunIntervalUnits: String
  Description: String
  ExternalSystemRecordID: String!
  ID: String!
  Name: String!
  ReportsArray: [Report_!]!

  """
  If specified, this subclass key, via the ClassFactory, will be instantiated, to execute this workflow. If not specified the WorkflowBase class will be used by default.
  """
  SubclassName: String
  WorkflowEngineID: String!
  WorkflowRunsArray: [WorkflowRun_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""Tracks the resources that are active within a given worksapce"""
type WorkspaceItem_ {
  Configuration: String
  Description: String
  ID: String!
  Name: String!
  ResourceRecordID: String
  ResourceType: String!
  ResourceTypeID: String!
  Sequence: Int!
  Workspace: String!
  WorkspaceID: String!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

"""A user can have one or more workspaces"""
type Workspace_ {
  Description: String
  ID: String!
  Name: String!
  User: String!
  UserID: String!
  WorkspaceItemsArray: [WorkspaceItem_!]!
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
}

type flyway_schema_history_ {
  _mj__CreatedAt: Timestamp!
  _mj__UpdatedAt: Timestamp!
  checksum: Int
  description: String
  execution_time: Int!
  installed_by: String!
  installed_on: Timestamp!
  installed_rank: Int!
  script: String!
  success: Boolean!
  type: String!
  version: String
}